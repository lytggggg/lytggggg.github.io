<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>redis实现登陆功能</title>
    <link href="/2025/05/16/redis%E5%AE%9E%E7%8E%B0%E7%99%BB%E9%99%86%E5%8A%9F%E8%83%BD/"/>
    <url>/2025/05/16/redis%E5%AE%9E%E7%8E%B0%E7%99%BB%E9%99%86%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="整体登陆流程"><a href="#整体登陆流程" class="headerlink" title="整体登陆流程"></a>整体登陆流程</h1><p><img src="/../images/redis%E5%AE%9E%E7%8E%B0%E7%99%BB%E9%99%86%E5%8A%9F%E8%83%BD/1.png"></p><h2 id="1、发送验证码"><a href="#1、发送验证码" class="headerlink" title="1、发送验证码"></a>1、发送验证码</h2><p>点击发送验证码后，首先进行手机号的校验，校验失败返回错误提示。校验成功后生成验证码，并存储到redis中，过期时间为5分钟。key格式为：login:code:{手机号}。然后发送验证码。返回成功响应。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">sendCode</span><span class="hljs-params">(String phone, HttpSession session)</span> &#123;<br>    <span class="hljs-comment">// 校验手机号格式是否正确</span><br>    <span class="hljs-keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;<br>        <span class="hljs-comment">// 如果手机号格式不正确，返回错误信息</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;手机号格式错误！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 生成6位随机数字验证码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> RandomUtil.randomNumbers(<span class="hljs-number">6</span>);<br><br>    <span class="hljs-comment">// 将验证码保存到Redis，设置5分钟有效期</span><br>    <span class="hljs-comment">// key格式：login:code:&#123;手机号&#125;</span><br>    redisTemplate.opsForValue().set(<span class="hljs-string">&quot;login:code:&quot;</span> + phone, code, <span class="hljs-number">5</span>, TimeUnit.MINUTES);<br><br>    <span class="hljs-comment">// 模拟发送验证码，实际项目中这里应该调用短信服务API</span><br>    log.debug(<span class="hljs-string">&quot;发送验证码成功！验证码为：&#123;&#125;&quot;</span>, code);<br><br>    <span class="hljs-comment">// 返回成功响应</span><br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、根据验证码登陆。"><a href="#2、根据验证码登陆。" class="headerlink" title="2、根据验证码登陆。"></a>2、根据验证码登陆。</h2><p>收到验证码填写后，进行登陆。首先还是先校验手机号。校验失败返回错误提示。校验成功后开始校验验证码，验证码从redis里面通过手机号phone取，校验失败返回错误提示。校验成功后，通过手机号查询user表里是否有用户，如果没有则自动创建新用户。随后生成token，键为uuid，值为用户信息，并存储到redis中，设置过期时间30分钟。并把token返回给前端，后续前端的任何请求都会携带token。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> loginForm.getPhone();<br><br>    <span class="hljs-comment">// 再次校验手机号格式</span><br>    <span class="hljs-keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;手机号格式错误！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> loginForm.getCode();<br>    <span class="hljs-comment">// 从Redis获取之前存储的验证码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">cacheCode</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().get(<span class="hljs-string">&quot;login:code:&quot;</span> + phone);<br><br>    <span class="hljs-comment">// 验证码校验：检查是否存在或是否匹配</span><br>    <span class="hljs-keyword">if</span> (cacheCode == <span class="hljs-literal">null</span> || !cacheCode.equals(code)) &#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;验证码错误！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 验证通过，根据手机号查询用户</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;phone&quot;</span>, phone).one();<br><br>    <span class="hljs-comment">// 判断用户是否存在，不存在则自动注册</span><br>    <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>        user = createUserWithPhone(phone);<br>    &#125;<br><br>    <span class="hljs-comment">// 生成登录令牌token（UUID的简化版，不带连字符）</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString(<span class="hljs-literal">true</span>);<br><br>    <span class="hljs-comment">// 将User对象转换为UserDTO对象（数据传输对象，通常包含较少敏感字段）</span><br>    <span class="hljs-type">UserDTO</span> <span class="hljs-variable">userDTO</span> <span class="hljs-operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);<br><br>    <span class="hljs-comment">// 将UserDTO转为Map，便于存入Redis的Hash结构</span><br>    Map&lt;String, Object&gt; userMap = BeanUtil.beanToMap(userDTO);<br>    <span class="hljs-comment">// 将Map中的所有值转为String类型，因为Redis要求值为String</span><br>    userMap.replaceAll((k, v) -&gt; v.toString());<br><br>    <span class="hljs-comment">// 将用户信息以Hash结构存入Redis</span><br>    <span class="hljs-comment">// key格式：login:token:&#123;token&#125;</span><br>    redisTemplate.opsForHash().putAll(<span class="hljs-string">&quot;login:token:&quot;</span> + token, userMap);<br>    <span class="hljs-comment">// 设置token的有效期为30分钟</span><br>    redisTemplate.expire(<span class="hljs-string">&quot;login:token:&quot;</span> + token, <span class="hljs-number">30</span>, TimeUnit.MINUTES);<br><br>    <span class="hljs-comment">// 返回token给客户端</span><br>    <span class="hljs-keyword">return</span> Result.ok(token);<br>&#125;<br><br><span class="hljs-keyword">private</span> User <span class="hljs-title function_">createUserWithPhone</span><span class="hljs-params">(String phone)</span> &#123;<br>    <span class="hljs-comment">// 创建用户对象</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    <span class="hljs-comment">// 设置手机号</span><br>    user.setPhone(phone);<br>    <span class="hljs-comment">// 设置默认昵称：前缀 + 10位随机字符串</span><br>    user.setNickName(USER_NICK_NAME_PREFIX + RandomUtil.randomString(<span class="hljs-number">10</span>));<br>    <span class="hljs-comment">// 保存用户到数据库</span><br>    save(user);<br>    <span class="hljs-comment">// 返回创建的用户对象</span><br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、登陆状态验证"><a href="#3、登陆状态验证" class="headerlink" title="3、登陆状态验证"></a>3、登陆状态验证</h2><p><img src="/../images/redis%E5%AE%9E%E7%8E%B0%E7%99%BB%E9%99%86%E5%8A%9F%E8%83%BD/2.png"></p><p>登陆成功后还没完成。需要通过token来验证是否是登陆中。使用两层拦截器。第一层拦截器拦截所有请求，如果token存在且redis中token的值没有过期，则从redis中取出用户并保存到ThreadLocal，并且刷新token有效期。否则直接放行。第二层拦截器就判断ThreadLocal是否有值，如果没有说明没有登陆，直接拦截。否则就放行。这样就保证了在使用的过程中token会不断刷新有效期，只有没有使用的时候token才会过期。</p><p><strong>第一层拦截器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hmdp.interceptor;<br><br><span class="hljs-keyword">import</span> cn.hutool.core.bean.BeanUtil;<br><span class="hljs-keyword">import</span> cn.hutool.core.util.StrUtil;<br><span class="hljs-keyword">import</span> com.hmdp.dto.UserDTO;<br><span class="hljs-keyword">import</span> com.hmdp.utils.UserHolder;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 第一层拦截器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RefreshInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 从请求头中获取token</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;authorization&quot;</span>);<br>        <span class="hljs-comment">// 判断token是否为空，为空则直接放行</span><br>        <span class="hljs-keyword">if</span> (StrUtil.isBlank(token)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 基于token从Redis中获取用户信息</span><br>        <span class="hljs-comment">// Redis中用户信息以Hash结构存储，key格式为&quot;login:token:&#123;token值&#125;&quot;</span><br>        Map&lt;Object, Object&gt; userEntries = redisTemplate.opsForHash().entries(<span class="hljs-string">&quot;login:token:&quot;</span> + token);<br><br>        <span class="hljs-comment">// 判断用户信息是否存在，不存在则直接放行</span><br>        <span class="hljs-keyword">if</span> (userEntries.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 将Redis中的用户数据转换为UserDTO对象</span><br>        <span class="hljs-type">UserDTO</span> <span class="hljs-variable">userDTO</span> <span class="hljs-operator">=</span> BeanUtil.fillBeanWithMap(userEntries, <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDTO</span>(), <span class="hljs-literal">false</span>);<br><br>        <span class="hljs-comment">// 将用户信息存入ThreadLocal，便于当前线程后续使用</span><br>        UserHolder.saveUser(userDTO);<br><br>        <span class="hljs-comment">// 刷新Redis中token的过期时间，延长用户登录状态</span><br>        <span class="hljs-comment">// 设置为30分钟</span><br>        redisTemplate.expire(<span class="hljs-string">&quot;login:token:&quot;</span> + token, <span class="hljs-number">30</span> * <span class="hljs-number">60</span>, TimeUnit.SECONDS);<br><br>        <span class="hljs-comment">// 放行请求</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//移除用户</span><br>        UserHolder.removeUser();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>第二层拦截器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hmdp.interceptor;<br><br><span class="hljs-keyword">import</span> com.hmdp.utils.UserHolder;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 第二层拦截器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TokenInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//第一层拦截器过后，如果threadLocal没有用户，说明没有登录，返回401</span><br>        <span class="hljs-keyword">if</span> (UserHolder.getUser() == <span class="hljs-literal">null</span>) &#123;<br>            response.setStatus(<span class="hljs-number">401</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//移除用户</span><br>        UserHolder.removeUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>位运算</title>
    <link href="/2025/05/13/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <url>/2025/05/13/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h1 id="位运算技巧"><a href="#位运算技巧" class="headerlink" title="位运算技巧"></a>位运算技巧</h1><p><img src="/../images/%E4%BD%8D%E8%BF%90%E7%AE%97/1.png"></p><p><img src="/../images/%E4%BD%8D%E8%BF%90%E7%AE%97/2.png"></p><p><img src="/../images/%E4%BD%8D%E8%BF%90%E7%AE%97/3.png"></p><p><img src="/../images/%E4%BD%8D%E8%BF%90%E7%AE%97/4.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>只出现一次数字及其变种</title>
    <link href="/2025/05/12/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E6%95%B0%E5%AD%97%E5%8F%8A%E5%85%B6%E5%8F%98%E7%A7%8D/"/>
    <url>/2025/05/12/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E6%95%B0%E5%AD%97%E5%8F%8A%E5%85%B6%E5%8F%98%E7%A7%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="1、原版"><a href="#1、原版" class="headerlink" title="1、原版"></a>1、原版</h1><p>给你一个 <strong>非空</strong> 整数数组 <code>nums</code> ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：nums = <span class="hljs-string">[4,1,2,1,2]</span><br><br>输出：<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="解法1：hashMap"><a href="#解法1：hashMap" class="headerlink" title="解法1：hashMap"></a>解法1：hashMap</h2><p>原理：nums[i]作为key，如果map里面没有key，则存入(nums[i],1)。如果存在key，则value++。最后统计value&#x3D;1的key。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">singleNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br><br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            <span class="hljs-keyword">if</span> (!map.containsKey(num)) &#123;<br>                map.put(num, <span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                map.compute(num, (k, v) -&gt; v + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// for (int num : nums) &#123;</span><br>        <span class="hljs-comment">//     map.put(num, map.getOrDefault(num, 0) + 1);</span><br>        <span class="hljs-comment">// &#125;</span><br><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; i : map.entrySet()) &#123;<br>            <span class="hljs-keyword">if</span> (i.getValue() == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span> i.getKey();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="解法2：异或运算"><a href="#解法2：异或运算" class="headerlink" title="解法2：异或运算"></a>解法2：异或运算</h2><p>原理如图：</p><p><img src="/../images/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E6%95%B0%E5%AD%97%E5%8F%8A%E5%85%B6%E5%8F%98%E7%A7%8D/1.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">singleNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br><br>        <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num:nums)&#123;<br>            res=res^num;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="解法3：求和解法"><a href="#解法3：求和解法" class="headerlink" title="解法3：求和解法"></a>解法3：求和解法</h2><p>原来：利用hashSet去重，再将去重后的集合求和x2，减去原数组的和，剩下的就是单个元素。</p><p>代码略</p><h1 id="2、变种1"><a href="#2、变种1" class="headerlink" title="2、变种1"></a>2、变种1</h1><p>给你一个整数数组 <code>nums</code> ，除某个元素仅出现 <strong>一次</strong> 外，其余每个元素都恰出现 <strong>三次 。</strong>请你找出并返回那个只出现了一次的元素。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：nums = <span class="hljs-string">[0,1,0,1,0,1,99]</span><br>输出：<span class="hljs-number">99</span><br></code></pre></td></tr></table></figure><h2 id="解法1：求和解法"><a href="#解法1：求和解法" class="headerlink" title="解法1：求和解法"></a>解法1：求和解法</h2><p>原来：利用hashSet去重，再将去重后的集合求和x3，减去原数组的和，剩下的就是单个元素的两倍，再&#x2F;2就是结果。</p><p>代码略</p><h2 id="解法2：二进制位求余"><a href="#解法2：二进制位求余" class="headerlink" title="解法2：二进制位求余"></a>解法2：二进制位求余</h2><p>原理：如图</p><p><img src="/../images/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E6%95%B0%E5%AD%97%E5%8F%8A%E5%85%B6%E5%8F%98%E7%A7%8D/2.png"></p><p>将进制数转化为二进制后，相同的数字二进制是一样的，那么对于二进制位为1的为，我求和再对3取余后，相同的数字的二进制位&#x3D;0，如果不等于0，说明余数就是单个数字的二进制。结果就出来了。</p><p>对于每个二进制位求和，可以通过与001、010、100相与。</p><p>比如第0位求和:nums[i]&amp;(1&lt;&lt;0) ，如果二进制位为0就不用求，跳过，为1才求，所有统计为（nums[i]&amp;(1&lt;&lt;0) ）！&#x3D;0才进行count++</p><p>假设每个位对3取余后的结果为0101101。</p><p>那么我们最终的结果通过或运算来拼接。比如res&#x3D;0，也是就是0000000，第0位是1，则0000000|0000001&#x3D;0000001。</p><p>第1位是0跳过。第2位是1，则0000001|0000100&#x3D;0000101。依次进行拼接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">singleNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">32</span>;i++)&#123;<br>            <span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;nums.length;j++)&#123;<br>                <span class="hljs-keyword">if</span>((nums[j]&amp;(<span class="hljs-number">1</span>&lt;&lt;i))!=<span class="hljs-number">0</span>)&#123;<br>                    count++;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(count%<span class="hljs-number">3</span>!=<span class="hljs-number">0</span>)&#123;<br>                res=res|(<span class="hljs-number">1</span>&lt;&lt;i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3、变种2"><a href="#3、变种2" class="headerlink" title="3、变种2"></a>3、变种2</h1><p>给你一个整数数组 <code>nums</code>，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 <strong>任意顺序</strong> 返回答案。</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[1,2,1,3,2,5]</span><br>输出：<span class="hljs-comment">[3,5]</span><br>解释：<span class="hljs-comment">[5, 3]</span> 也是有效的答案。<br></code></pre></td></tr></table></figure><h2 id="解法：异或运算-n-amp-n"><a href="#解法：异或运算-n-amp-n" class="headerlink" title="解法：异或运算+n&amp;(-n)"></a>解法：异或运算+n&amp;(-n)</h2><p>原理：利用原题的异或运算，只不过疑惑运算后的结果是两个值的异或值，比如n&#x3D;2^3，既然2和3不相等，说明他们的二进制至少有一位是1，因为异或运算相同的为0，不同的为1。通过n&amp;(-n)求得n的最右边的1，以这个1为标志位来区分2和3，同时以这个标志位来划分整个数组为两个部分。bit&#x3D;n&amp;（-n）。假设bit&#x3D;000100。那么bit&amp;nums[i]!&#x3D;0的话分为一组，bit&amp;num[i]&#x3D;0分为一组。最后这两组就变成了两个原题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] singleNumber(<span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            n = n ^ num;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">bit</span> <span class="hljs-operator">=</span> n &amp; (-n);<br>        <span class="hljs-type">int</span> res[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : nums) &#123;<br>            <span class="hljs-keyword">if</span> ((bit &amp; i) != <span class="hljs-number">0</span>) &#123;<br>                res[<span class="hljs-number">0</span>] = res[<span class="hljs-number">0</span>] ^ i;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                res[<span class="hljs-number">1</span>] = res[<span class="hljs-number">1</span>] ^ i;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>算法总结</title>
    <link href="/2025/05/12/%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <url>/2025/05/12/%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="hashMap常用方法"><a href="#hashMap常用方法" class="headerlink" title="hashMap常用方法"></a>hashMap常用方法</h1><p>清空hashMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">map.clear();<br></code></pre></td></tr></table></figure><p>输出Key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 输出 key 和 value</span><br><span class="hljs-keyword">for</span> (Integer i : Sites.keySet()) &#123;<br>    System.out.println(<span class="hljs-string">&quot;key: &quot;</span> + i + <span class="hljs-string">&quot; value: &quot;</span> + Sites.get(i));<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 返回所有 value 值</span><br><span class="hljs-keyword">for</span>(String value: Sites.values()) &#123;<br>    <span class="hljs-comment">// 输出每一个value</span><br>    System.out.print(value + <span class="hljs-string">&quot;, &quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出key、value</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(Map.Entry&lt;Integer,Integer&gt; entry:map.entrySet()</span></span>)&#123;<br><span class="hljs-built_in">sout</span>(entry<span class="hljs-selector-class">.getkey</span>())<br><span class="hljs-built_in">sout</span>(entry<span class="hljs-selector-class">.getValue</span>())<br>&#125;<br></code></pre></td></tr></table></figure><p>Integer i&#x3D;map.putIfAbsent(“apple”,3)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//如果是第一次put，则返回值是null，且put进去。</span><br><span class="hljs-comment">//如果是第二次put这个key，则put不进去，返回这个key的value</span><br>```<br>HashMap&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-comment">// 第一次添加 - key 不存在</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> map.putIfAbsent(<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-number">100</span>);<br>        System.out.println(<span class="hljs-string">&quot;第一次添加 apple: &quot;</span> + result1);  <span class="hljs-comment">// 输出: null</span><br>        System.out.println(<span class="hljs-string">&quot;Map: &quot;</span> + map);  <span class="hljs-comment">// 输出: &#123;apple=100&#125;</span><br><br>        <span class="hljs-comment">// 第二次尝试添加相同的 key - key 已存在</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> map.putIfAbsent(<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-number">200</span>);<br>        System.out.println(<span class="hljs-string">&quot;第二次添加 apple: &quot;</span> + result2);  <span class="hljs-comment">// 输出: 100</span><br>        System.out.println(<span class="hljs-string">&quot;Map: &quot;</span> + map);  <span class="hljs-comment">// 输出: &#123;apple=100&#125;</span><br><br>        <span class="hljs-comment">// 添加新的 key</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> map.putIfAbsent(<span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-number">150</span>);<br>        System.out.println(<span class="hljs-string">&quot;添加 banana: &quot;</span> + result3);  <span class="hljs-comment">// 输出: null</span><br>        System.out.println(<span class="hljs-string">&quot;Map: &quot;</span> + map);  <span class="hljs-comment">// 输出: &#123;apple=100, banana=150&#125;</span><br>```<br></code></pre></td></tr></table></figure><p>是否存在key或者value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">map.containsKey()<br>map.containsValue()<br></code></pre></td></tr></table></figure><p>获取key对应的值，如果没有key，则设置默认值1</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">getOrDefault</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br></code></pre></td></tr></table></figure><p>compute:如果 key 对应的 value 不存在，则返回该 null，如果存在，则返回通过 remappingFunction 重新计算后的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">new_value</span> <span class="hljs-operator">=</span> map.compute(<span class="hljs-number">1</span>, (key, value) -&gt; value +<span class="hljs-number">1</span> );<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>跳一跳物理外挂（重制版）</title>
    <link href="/2024/08/11/%E8%B7%B3%E4%B8%80%E8%B7%B3%E7%89%A9%E7%90%86%E5%A4%96%E6%8C%82%EF%BC%88%E9%87%8D%E5%88%B6%E7%89%88%EF%BC%89/"/>
    <url>/2024/08/11/%E8%B7%B3%E4%B8%80%E8%B7%B3%E7%89%A9%E7%90%86%E5%A4%96%E6%8C%82%EF%BC%88%E9%87%8D%E5%88%B6%E7%89%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="先装为敬"><a href="#先装为敬" class="headerlink" title="先装为敬"></a>先装为敬</h1><h1 id="注意，这是世界纪录。"><a href="#注意，这是世界纪录。" class="headerlink" title="注意，这是世界纪录。"></a>注意，这是世界纪录。</h1><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=556955310&bvid=BV1Tv4y1c7HL&cid=800868848&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3%E9%87%8D%E5%88%B6%E7%89%88/jilu.png"></p><p>由于时代在发展，社会在进步。之前的算法一并舍弃，完成了最新的算法，本次算法在<strong>稳定性</strong>，<strong>容错率</strong>，<strong>精度</strong>，都有质的提升。</p><h1 id="准备东西"><a href="#准备东西" class="headerlink" title="准备东西"></a>准备东西</h1><p>1，用python写的，主要是C++的opencv太难写了，但是如果追求速度，害得是C++，python有点慢</p><p>2，安利两个实用工具，也是要用到的工具</p><p><a href="https://www.snipaste.com/">Snipaste</a>,截图贴图工具，截的图可以贴在旁边，非常方便。</p><p><a href="https://onequick.org/?f=app">OneQuick</a>,窗口置顶工具，想让某个窗口置顶就鼠标移上去按Win+G,默认的好像是Win+T。</p><p>都是微软的。</p><p>3，微信电脑版，要用跳一跳。</p><p>over。</p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="找棋子坐标"><a href="#找棋子坐标" class="headerlink" title="找棋子坐标"></a>找棋子坐标</h2><p>看下面的图，分析特点。</p><hr><img src="/images/跳一跳/Snipaste_2022.png" style="zoom: 55%;"><hr><p>棋子桌标就是棋子的脚底下的中心点，找到他其实很简单，用opencv库的模板匹配。</p><p>我们首先要准备一张棋子的模板，如图</p><hr><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022_0.png"></p><hr><p>距离把它包裹住并且贴紧，然后用它来匹配原图像，</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br>img = cv2.imread(<span class="hljs-string">&quot;f:\Snipaste_2022.png&quot;</span>)<br>template = cv2.imread(<span class="hljs-string">&#x27;f:\Snipaste_2022_0.png&#x27;</span>)<br>res = cv2.matchTemplate(img, template, cv2.TM_CCOEFF_NORMED)<br>min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)<br>h, w = template.shape[:<span class="hljs-number">2</span>]<br>top_left = max_loc<br>center_loc = ((<span class="hljs-built_in">int</span>)(max_loc[<span class="hljs-number">0</span>] + w ), <span class="hljs-built_in">int</span>(max_loc[<span class="hljs-number">1</span>] + h ) )<br>cv2.rectangle(img, max_loc, center_loc, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">1</span>, <span class="hljs-number">8</span>)<br>cv2.imshow(<span class="hljs-string">&quot;sad&quot;</span>,img)<br>cv2.waitKey(<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>结果像这样：</p><hr><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022_1.png"></p><hr><p>这个矩形的坐标是知道的，找到脚底下的坐标不言而喻了吧。</p><h2 id="找目标点坐标"><a href="#找目标点坐标" class="headerlink" title="找目标点坐标"></a>找目标点坐标</h2><p>首先我们要知道，为了找到目标点坐标，哪些东西有用哪些东西没用。</p><p>看图：</p><hr><img src="/images/跳一跳/Snipaste_2022_2.png" style="zoom: 55%;"><hr><p>棋子以下的部分不需要吧，记分数字上面的东西不需要吧，当然棋子的右半身也不需要吧，需要的部分只有棋子的右上部分，所以我们需要把一整张图剪切成那样，</p><hr><img src="/images/跳一跳/Snipaste_2022_4.png" style="zoom: 55%;"><hr><p> 之前的算法是扫描整张图片的像素点，找到第一个像素变化最大的点的坐标，这个点的颜色就是目标图像的颜色，然后将不是这个颜色的坐标全部涂黑，然后用opencv边缘检测找到最左边（最右边）的坐标，然后求中点。</p><p>而问题在于这样找出的第一个点的坐标与实际不是很准确，分割图像的时候也有把目标图像也分割的情况，导致找到最左边（最右边）的坐标，然后求中点，会出现很大的误差。</p><p>所以，既然扫描像素的方式会有误差，那就不扫描像素，看图：</p><hr><img src="/images/跳一跳重制版/Snipaste_2022_2.png" style="zoom: 55%;"><img src="/images/跳一跳重制版/Snipaste_2022_3.png" style="zoom: 100%;"><hr><p>这是经过分割得到的有效区域。</p><p>我们直接用opencv边缘检测：</p><hr><img src="/images/跳一跳重制版/Snipaste_2022_5.png" style="zoom: 100%;"><hr><p>这些边缘都是由一连串的点构成的（[[1,2],[2,3],[3,4]]…………….），我们要找到第一个颜色变化最大的坐标，等价于边缘检测后所有点中Y坐标最小的点的坐标。所有，只要计算列表中y坐标最小值，就找到颜色变化最大的坐标。而这个点及其关键，因为我们的中心点刚好需要他来得到。</p><p>找到颜色变化最大的坐标后，不是这个点的颜色的坐标全部涂黑，如图：</p><hr><img src="/images/跳一跳重制版/Snipaste_2022_4.png" style="zoom: 100%;"><hr><p>目标图形的轮廓就被我们提取出来了，相比分割有效区域之后的图，那些干扰的颜色就全被处理掉了，只有一小部分的干扰项目。</p><p>我们继续用边缘检测检测出他的轮廓，算出X最小（最大）值找到最左（最右）的点，算出Y最小的值找到最上面的点，过两点做平行于x,y轴的直线，交点就是中心坐标：</p><p>如图：</p><hr><img src="/images/跳一跳重制版/Snipaste_2022_8.png" style="zoom: 100%;"><img src="/images/跳一跳重制版/Snipaste_2022_7.png" style="zoom: 100%;"><hr><p>可以看到，这样找出来的中心点是<strong>非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常之准确</strong>的。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> shutil<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> win32con<br><span class="hljs-keyword">import</span> win32gui<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> ImageGrab<br><span class="hljs-keyword">from</span> pynput.mouse <span class="hljs-keyword">import</span> Button, Controller<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> pyscreenshot<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pyautogui<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">import</span> os<br><br>change1 = <span class="hljs-number">2</span><br>change2 = <span class="hljs-number">0</span><br><br>t = <span class="hljs-number">38</span><br><br>m = <span class="hljs-number">9</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">math_point</span>(<span class="hljs-params">p, center_loc, k</span>):<br>    <span class="hljs-comment"># y=-0.58*x+a*0.58+b</span><br>    y1 = k * center_loc[<span class="hljs-number">0</span>] + p[<span class="hljs-number">0</span>] * (-k) + p[<span class="hljs-number">1</span>]<br>    y1 = <span class="hljs-built_in">int</span>(y1)<br>    x2 = (p[<span class="hljs-number">0</span>] * (-k) + p[<span class="hljs-number">1</span>] - center_loc[<span class="hljs-number">1</span>]) / (-k)<br>    x2 = <span class="hljs-built_in">int</span>(x2)<br><br>    p1 = (center_loc[<span class="hljs-number">0</span>], y1)<br>    p2 = (x2, center_loc[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> p1, p2<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_img1</span>(<span class="hljs-params">img, place</span>):<br>    pt_1 = ()<br>    pt_2 = ()<br>    pt_3 = ()<br>    pt_4 = ()<br>    pt_5 = ()<br>    <span class="hljs-keyword">if</span> place == <span class="hljs-string">&quot;left&quot;</span>:<br>        pt_1 = (img.shape[<span class="hljs-number">1</span>], img.shape[<span class="hljs-number">0</span>])<br>        pt_2 = (img.shape[<span class="hljs-number">1</span>], img.shape[<span class="hljs-number">0</span>] - <span class="hljs-number">30</span>)<br>        pt_3 = (img.shape[<span class="hljs-number">1</span>] - <span class="hljs-number">50</span>, img.shape[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">else</span>:<br>        pt_1 = (<span class="hljs-number">0</span>, img.shape[<span class="hljs-number">0</span>] - <span class="hljs-number">30</span>)<br>        pt_2 = (<span class="hljs-number">0</span>, img.shape[<span class="hljs-number">0</span>])<br>        pt_3 = (<span class="hljs-number">50</span>, img.shape[<span class="hljs-number">0</span>])<br><br>    blank = np.ones(img.shape[:<span class="hljs-number">2</span>], dtype=<span class="hljs-string">&#x27;uint8&#x27;</span>)<br>    cv2.circle(blank, pt_1, <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), -<span class="hljs-number">1</span>)<br>    cv2.circle(blank, pt_2, <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), -<span class="hljs-number">1</span>)<br>    cv2.circle(blank, pt_3, <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), -<span class="hljs-number">1</span>)<br><br>    triangle_cnt = np.array([pt_1, pt_2, pt_3])<br><br>    mask = cv2.drawContours(blank, [triangle_cnt], <span class="hljs-number">0</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), -<span class="hljs-number">1</span>)<br>    m = cv2.bitwise_and(img, img, mask=mask)<br>    img2 = cv2.medianBlur(m, <span class="hljs-number">5</span>)<br>    cv2.imshow(<span class="hljs-string">&quot;img2&quot;</span>, img2)<br><br>    hwnd = win32gui.FindWindow(<span class="hljs-literal">None</span>, <span class="hljs-string">&quot;img2&quot;</span>)  <span class="hljs-comment"># 获取句柄，然后置顶</span><br>    CVRECT = cv2.getWindowImageRect(<span class="hljs-string">&quot;img2&quot;</span>)<br>    win32gui.SetWindowPos(hwnd, win32con.HWND_TOPMOST, <span class="hljs-number">610</span>, <span class="hljs-number">125</span>, img2.shape[<span class="hljs-number">1</span>] + <span class="hljs-number">10</span>, img2.shape[<span class="hljs-number">0</span>] + <span class="hljs-number">40</span>,<br>                          win32con.SWP_SHOWWINDOW)<br>    <span class="hljs-keyword">return</span> img2<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">distance</span>(<span class="hljs-params">a, b</span>):<br>    p1 = np.array(a)<br>    p2 = np.array(b)<br>    p3 = p1 - p2<br>    p4 = math.hypot(p3[<span class="hljs-number">0</span>], p3[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> p4<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_time</span>(<span class="hljs-params">length</span>):<br>    <span class="hljs-keyword">if</span> length &gt; <span class="hljs-number">300</span>:<br>        time = length / <span class="hljs-number">317.001158116</span><br>        <span class="hljs-keyword">return</span> time<br>    <span class="hljs-keyword">elif</span> length &gt; <span class="hljs-number">280</span>:<br>        time = length / <span class="hljs-number">312.001158116</span><br>        <span class="hljs-keyword">return</span> time<br>    <span class="hljs-keyword">elif</span> length &gt; <span class="hljs-number">150</span>:<br>        time = length / <span class="hljs-number">306.001158116</span><br>        <span class="hljs-keyword">return</span> time<br>    <span class="hljs-keyword">else</span>:<br>        time = length / <span class="hljs-number">300.001158116</span><br>        <span class="hljs-keyword">return</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dian_ji</span>(<span class="hljs-params">time1</span>):<br>    mouse = Controller()<br>    mouse.press(Button.left)<br>    time.sleep(time1)<br>    mouse.release(Button.left)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_center</span>(<span class="hljs-params">img_rgb, template</span>):<br>    res = cv2.matchTemplate(img_rgb, template, cv2.TM_CCOEFF_NORMED)<br>    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)<br>    h, w = template.shape[:<span class="hljs-number">2</span>]<br>    top_left = max_loc<br>    center_loc = ((<span class="hljs-built_in">int</span>)(max_loc[<span class="hljs-number">0</span>] + w / <span class="hljs-number">2</span>), <span class="hljs-built_in">int</span>(max_loc[<span class="hljs-number">1</span>] + h / <span class="hljs-number">2</span>) + <span class="hljs-number">36</span>)<br>    a = cv2.circle(img_rgb, center_loc, <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">3</span>, lineType=cv2.LINE_AA)<br><br>    <span class="hljs-keyword">return</span> max_loc, h, w, center_loc<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">RemoveDir</span>(<span class="hljs-params">filepath</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    如果文件夹不存在就创建，如果文件存在就清空！</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(filepath):<br>        os.mkdir(filepath)<br>    <span class="hljs-keyword">else</span>:<br>        shutil.rmtree(filepath)<br>        os.mkdir(filepath)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_tol</span>(<span class="hljs-params">img, change1</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(img) == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> img, -<span class="hljs-number">1</span><br>    img_copy = img.copy()<br>    img_test = img.copy()<br>    img_test = cv2.cvtColor(img_test, cv2.COLOR_BGR2GRAY)<br>    img_test = cv2.GaussianBlur(img_test, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), cv2.BORDER_DEFAULT)<br>    img_test = cv2.Canny(img_test, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>)<br><br>    cv2.imshow(<span class="hljs-string">&quot;img_test&quot;</span>, img_test)<br>    hwnd = win32gui.FindWindow(<span class="hljs-literal">None</span>, <span class="hljs-string">&quot;img_test&quot;</span>) <br>    CVRECT = cv2.getWindowImageRect(<span class="hljs-string">&quot;img_test&quot;</span>)<br>    win32gui.SetWindowPos(hwnd, win32con.HWND_TOPMOST, <span class="hljs-number">1210</span>, <span class="hljs-number">125</span>, img.shape[<span class="hljs-number">1</span>] + <span class="hljs-number">10</span>, img.shape[<span class="hljs-number">0</span>] + <span class="hljs-number">40</span>,<br>                          win32con.SWP_SHOWWINDOW)<br>    contours1, hierarchy = cv2.findContours(image=img_test, mode=cv2.RETR_EXTERNAL, method=cv2.CHAIN_APPROX_SIMPLE)<br>    contours = []<br>    <span class="hljs-keyword">for</span> obj <span class="hljs-keyword">in</span> contours1:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> obj:<br>            i = i.squeeze()<br>            i = i.tolist()<br><br>            contours.append(i)<br>    zui_min = np.amin(contours, axis=<span class="hljs-number">0</span>)[<span class="hljs-number">1</span>]<br>    arr_min = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> contours:<br>        <span class="hljs-keyword">if</span> i[<span class="hljs-number">1</span>] == zui_min:<br>            arr_min.append(i)<br>    arr = [<span class="hljs-built_in">int</span>(np.mean(arr_min, axis=<span class="hljs-number">0</span>)[<span class="hljs-number">0</span>]), zui_min]<br>   <br>    co = img[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(co) == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> img, -<span class="hljs-number">1</span><br>    co = img[arr[<span class="hljs-number">1</span>] + change1][arr[<span class="hljs-number">0</span>] + change2]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;co&quot;</span>, co)<br><br>    A = <span class="hljs-built_in">int</span>(img.shape[<span class="hljs-number">0</span>])<br>    B = <span class="hljs-built_in">int</span>(img.shape[<span class="hljs-number">1</span>])<br><br>    arr1 = []<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(A):<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(B):<br>           <br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>((<span class="hljs-built_in">int</span>(img[y][x][<span class="hljs-number">0</span>]) - <span class="hljs-built_in">int</span>(co[<span class="hljs-number">0</span>]))) &gt;= m <span class="hljs-keyword">or</span> <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(img[y][x][<span class="hljs-number">1</span>]) - <span class="hljs-built_in">int</span>(co[<span class="hljs-number">1</span>])) &gt;= m <span class="hljs-keyword">or</span> <span class="hljs-built_in">abs</span>(<br>                    <span class="hljs-built_in">int</span>(img[y][x][<span class="hljs-number">2</span>]) - <span class="hljs-built_in">int</span>(co[<span class="hljs-number">2</span>])) &gt;= m:<br>                b = (x, y)<br>                arr1.append(b)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(arr1) &gt; <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arr1:<br>            img_copy[i[<span class="hljs-number">1</span>]][i[<span class="hljs-number">0</span>]][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>            img_copy[i[<span class="hljs-number">1</span>]][i[<span class="hljs-number">0</span>]][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span><br>            img_copy[i[<span class="hljs-number">1</span>]][i[<span class="hljs-number">0</span>]][<span class="hljs-number">2</span>] = <span class="hljs-number">0</span><br>           <br>    pd = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-number">150</span> &lt; co[<span class="hljs-number">0</span>] &lt; <span class="hljs-number">190</span> <span class="hljs-keyword">and</span> <span class="hljs-number">180</span> &lt; co[<span class="hljs-number">1</span>] &lt; <span class="hljs-number">210</span> <span class="hljs-keyword">and</span> <span class="hljs-number">220</span> &lt; co[<span class="hljs-number">2</span>] &lt; <span class="hljs-number">240</span>:<br>        pd = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-number">100</span> &lt; co[<span class="hljs-number">0</span>] &lt; <span class="hljs-number">130</span> <span class="hljs-keyword">and</span> <span class="hljs-number">100</span> &lt; co[<span class="hljs-number">1</span>] &lt; <span class="hljs-number">130</span> <span class="hljs-keyword">and</span> <span class="hljs-number">140</span> &lt; co[<span class="hljs-number">2</span>] &lt; <span class="hljs-number">160</span>:<br>        pd = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-number">71</span> &lt; co[<span class="hljs-number">0</span>] &lt; <span class="hljs-number">75</span> <span class="hljs-keyword">and</span> <span class="hljs-number">71</span> &lt; co[<span class="hljs-number">1</span>] &lt; <span class="hljs-number">75</span> <span class="hljs-keyword">and</span> <span class="hljs-number">71</span> &lt; co[<span class="hljs-number">2</span>] &lt; <span class="hljs-number">75</span>:<br>        pd = <span class="hljs-number">3</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-number">135</span> &lt; co[<span class="hljs-number">0</span>] &lt; <span class="hljs-number">190</span> <span class="hljs-keyword">and</span> <span class="hljs-number">135</span> &lt; co[<span class="hljs-number">1</span>] &lt; <span class="hljs-number">190</span> <span class="hljs-keyword">and</span> <span class="hljs-number">135</span> &lt; co[<span class="hljs-number">2</span>] &lt; <span class="hljs-number">190</span> <span class="hljs-keyword">and</span> co[<span class="hljs-number">0</span>] == co[<span class="hljs-number">1</span>] == co[<span class="hljs-number">2</span>]:<br>        pd = <span class="hljs-number">4</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;pd&quot;</span>, pd)<br><br>    arry3 = []<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(A):<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(B):<br>            <br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(img[y][x][<span class="hljs-number">0</span>]) - <span class="hljs-number">72</span>) == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(img[y][x][<span class="hljs-number">1</span>]) - <span class="hljs-number">72</span>) == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">abs</span>(<br>                    <span class="hljs-built_in">int</span>(img[y][x][<span class="hljs-number">2</span>]) - <span class="hljs-number">72</span>) == <span class="hljs-number">0</span>:<br>                b = (x, y)<br>                arry3.append(b)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arry3:<br>        img_copy[i[<span class="hljs-number">1</span>]][i[<span class="hljs-number">0</span>]][<span class="hljs-number">0</span>] = <span class="hljs-number">255</span><br>        img_copy[i[<span class="hljs-number">1</span>]][i[<span class="hljs-number">0</span>]][<span class="hljs-number">1</span>] = <span class="hljs-number">255</span><br>        img_copy[i[<span class="hljs-number">1</span>]][i[<span class="hljs-number">0</span>]][<span class="hljs-number">2</span>] = <span class="hljs-number">255</span><br>        <br>    cv2.circle(img_copy2, (arr[<span class="hljs-number">0</span>], arr[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">1</span>, lineType=cv2.LINE_AA)<br><br>    a = img_copy<br><br>    <span class="hljs-keyword">return</span> a, pd, arr<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_c</span>(<span class="hljs-params">img, place, img_fuzhi, pd, aimg, c, top</span>):<br>    <span class="hljs-keyword">global</span> change1<br><br>    cv2.imshow(<span class="hljs-string">&quot;ppp&quot;</span>, img_fuzhi)<br>    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br>    img = cv2.GaussianBlur(img, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), cv2.BORDER_DEFAULT)<br>    img = cv2.Canny(img, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>)<br>    <br><br>    contours1, hierarchy = cv2.findContours(image=img, mode=cv2.RETR_EXTERNAL, method=cv2.CHAIN_APPROX_SIMPLE)<br>    cv2.drawContours(image=img_copy2, contours=contours1, contourIdx=-<span class="hljs-number">1</span>, color=(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), thickness=<span class="hljs-number">1</span>,<br>                     lineType=cv2.LINE_AA)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;len&quot;</span>, <span class="hljs-built_in">len</span>(contours1))<br>    area1 = []<br>    <span class="hljs-keyword">for</span> obj <span class="hljs-keyword">in</span> contours1:<br>        ret = cv2.minAreaRect(obj)<br>        pts = cv2.boxPoints(ret)<br>        area1.append(cv2.contourArea(pts))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;area&quot;</span>, np.mean(area1))<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(contours1) == <span class="hljs-number">0</span>:<br>        change1 = change1 + <span class="hljs-number">2</span><br>        img1, pd, arr = get_tol(img_fuzhi, change1)<br>        <span class="hljs-built_in">print</span>(change1)<br>        img2 = get_img1(img1, place)<br>        d = get_c(img2, place, img_fuzhi, pd, aimg, c, arr)<br>        <span class="hljs-keyword">return</span> d<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(contours1) == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> np.mean(area1) &lt; <span class="hljs-number">80</span>:<br>        change1 = change1 + <span class="hljs-number">2</span><br>        <span class="hljs-built_in">print</span>(change1)<br>        img1, pd, arr = get_tol(img_fuzhi, change1)<br>        img2 = get_img1(img1, place)<br>        d = get_c(img2, place, img_fuzhi, pd, aimg, c, arr)<br>        <span class="hljs-keyword">return</span> d<br><br>    contours = []<br>    <span class="hljs-keyword">for</span> obj <span class="hljs-keyword">in</span> contours1:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> obj:<br>            i = i.squeeze()<br>            i = i.tolist()<br><br>            contours.append(i)<br>    <span class="hljs-keyword">if</span> pd == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> place == <span class="hljs-string">&quot;left&quot;</span>:<br>            x_max = np.amax(contours, axis=<span class="hljs-number">0</span>)[<span class="hljs-number">0</span>]<br>            y_max = np.amax(contours, axis=<span class="hljs-number">0</span>)[<span class="hljs-number">1</span>]<br>            x_min = np.amin(contours, axis=<span class="hljs-number">0</span>)[<span class="hljs-number">0</span>]<br>            arr_min = []<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> contours:<br>                <span class="hljs-keyword">if</span> i[<span class="hljs-number">0</span>] == x_min:<br>                    arr_min.append(i)<br>            Left = [x_min, <span class="hljs-built_in">int</span>(np.mean(arr_min, axis=<span class="hljs-number">0</span>)[<span class="hljs-number">1</span>])]<br>            d = [top[<span class="hljs-number">0</span>], Left[<span class="hljs-number">1</span>]]<br>            cv2.circle(img_copy2, (Left[<span class="hljs-number">0</span>], Left[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">2</span>, lineType=cv2.LINE_AA)<br><br>            cv2.circle(img_copy2, (d[<span class="hljs-number">0</span>], d[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">2</span>, lineType=cv2.LINE_AA)<br>            cv2.imshow(<span class="hljs-string">&quot;img_cooy2&quot;</span>, img_copy2)<br>            hwnd = win32gui.FindWindow(<span class="hljs-literal">None</span>, <span class="hljs-string">&quot;img_cooy2&quot;</span>)  <span class="hljs-comment"># 获取句柄，然后置顶</span><br>            CVRECT = cv2.getWindowImageRect(<span class="hljs-string">&quot;img_cooy2&quot;</span>)<br>            win32gui.SetWindowPos(hwnd, win32con.HWND_TOPMOST, <span class="hljs-number">910</span>, <span class="hljs-number">125</span>, img.shape[<span class="hljs-number">1</span>] + <span class="hljs-number">10</span>, img.shape[<span class="hljs-number">0</span>] + <span class="hljs-number">40</span>,<br>                                  win32con.SWP_SHOWWINDOW)<br>            change1 = <span class="hljs-number">2</span><br>            <span class="hljs-keyword">return</span> d<br>            <br><br>        <span class="hljs-keyword">else</span>:<br>            x_min = np.amin(contours, axis=<span class="hljs-number">0</span>)[<span class="hljs-number">0</span>]<br>            y_max = np.amax(contours, axis=<span class="hljs-number">0</span>)[<span class="hljs-number">1</span>]<br>            x_max = np.amax(contours, axis=<span class="hljs-number">0</span>)[<span class="hljs-number">0</span>]<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;xmmin&quot;</span>,x_min)<br>            <span class="hljs-keyword">if</span> img.shape[<span class="hljs-number">1</span>] - x_max &lt; <span class="hljs-number">17</span> &lt; x_min:<br>                x_min = np.amin(contours, axis=<span class="hljs-number">0</span>)[<span class="hljs-number">0</span>]<br>                arr_min = []<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> contours:<br>                    <span class="hljs-keyword">if</span> i[<span class="hljs-number">0</span>] == x_min:<br>                        arr_min.append(i)<br>                Left = [x_min, <span class="hljs-built_in">int</span>(np.mean(arr_min, axis=<span class="hljs-number">0</span>)[<span class="hljs-number">1</span>])]<br>                d = [top[<span class="hljs-number">0</span>], Left[<span class="hljs-number">1</span>]]<br>                cv2.circle(img_copy2, (Left[<span class="hljs-number">0</span>], Left[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">2</span>, lineType=cv2.LINE_AA)<br><br>                <span class="hljs-comment"># cv2.circle(img_copy2, (d[0], d[1]), 1, (0, 0, 255), thickness=2, lineType=cv2.LINE_AA)</span><br>                <span class="hljs-comment"># cv2.line(img_copy2, (top[0],top[1]), (top[0],int(img_copy2.shape[0])), (0, 0, 255), thickness=1);</span><br>                <span class="hljs-comment">#</span><br>                <span class="hljs-comment"># cv2.line(img_copy2, (Left[0],Left[1]), (int(img_copy2.shape[1]),Left[1]), (0, 0, 255), thickness=1);</span><br>                cv2.imshow(<span class="hljs-string">&quot;img_cooy2&quot;</span>, img_copy2)<br>                hwnd = win32gui.FindWindow(<span class="hljs-literal">None</span>, <span class="hljs-string">&quot;img_cooy2&quot;</span>)  <span class="hljs-comment"># 获取句柄，然后置顶</span><br>                CVRECT = cv2.getWindowImageRect(<span class="hljs-string">&quot;img_cooy2&quot;</span>)<br>                win32gui.SetWindowPos(hwnd, win32con.HWND_TOPMOST, <span class="hljs-number">910</span>, <span class="hljs-number">125</span>, img.shape[<span class="hljs-number">1</span>] + <span class="hljs-number">10</span>, img.shape[<span class="hljs-number">0</span>] + <span class="hljs-number">40</span>,<br>                                      win32con.SWP_SHOWWINDOW)<br>                change1 = <span class="hljs-number">2</span><br>                <span class="hljs-keyword">return</span> d<br>            <span class="hljs-keyword">else</span>:<br><br>                arr_max = []<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> contours:<br>                    <span class="hljs-keyword">if</span> i[<span class="hljs-number">0</span>] == x_max:<br>                        arr_max.append(i)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;arrmax&quot;</span>, arr_max)<br>                Right = [x_max, <span class="hljs-built_in">int</span>(np.<span class="hljs-built_in">min</span>(arr_max, axis=<span class="hljs-number">0</span>)[<span class="hljs-number">1</span>])]<br>                d = [top[<span class="hljs-number">0</span>], Right[<span class="hljs-number">1</span>]]<br>                cv2.circle(img_copy2, (Right[<span class="hljs-number">0</span>], Right[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">2</span>, lineType=cv2.LINE_AA)<br><br>                cv2.circle(img_copy2, (d[<span class="hljs-number">0</span>], d[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">2</span>, lineType=cv2.LINE_AA)<br>                cv2.imshow(<span class="hljs-string">&quot;img_cooy2&quot;</span>, img_copy2)<br>                hwnd = win32gui.FindWindow(<span class="hljs-literal">None</span>, <span class="hljs-string">&quot;img_cooy2&quot;</span>)  <span class="hljs-comment"># 获取句柄，然后置顶</span><br>                CVRECT = cv2.getWindowImageRect(<span class="hljs-string">&quot;img_cooy2&quot;</span>)<br>                win32gui.SetWindowPos(hwnd, win32con.HWND_TOPMOST, <span class="hljs-number">910</span>, <span class="hljs-number">125</span>, img.shape[<span class="hljs-number">1</span>] + <span class="hljs-number">10</span>, img.shape[<span class="hljs-number">0</span>] + <span class="hljs-number">40</span>,<br>                                      win32con.SWP_SHOWWINDOW)<br>                change1 = <span class="hljs-number">2</span><br>                <span class="hljs-keyword">return</span> d<br><br><br><br>    <span class="hljs-keyword">else</span>:<br>        point_color = (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>)  <span class="hljs-comment"># BGR</span><br>        thickness = <span class="hljs-number">1</span><br>        lineType = <span class="hljs-number">4</span><br>        <span class="hljs-keyword">if</span> pd == <span class="hljs-number">2</span>:<br>            point_color = (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>)  <span class="hljs-comment"># BGR</span><br>            thickness = <span class="hljs-number">1</span><br>            lineType = <span class="hljs-number">4</span><br>            templatea = aimg<br>            img_rgba = aimg<br>            <span class="hljs-keyword">if</span> place == <span class="hljs-string">&quot;r&quot;</span>:<br>                templatea = cv2.imread(<span class="hljs-string">&quot;f:\\test\\test.png&quot;</span>)<br>                res = cv2.matchTemplate(img_rgba, templatea, cv2.TM_CCOEFF_NORMED)<br>                min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)<br>                h, w = templatea.shape[:<span class="hljs-number">2</span>]<br>                top_left = max_loc<br>                center_loc = ((<span class="hljs-built_in">int</span>)(max_loc[<span class="hljs-number">0</span>] - w / <span class="hljs-number">2</span> + <span class="hljs-number">7</span>), <span class="hljs-built_in">int</span>(max_loc[<span class="hljs-number">1</span>] - <span class="hljs-number">35</span>))<br>                a = cv2.circle(img_rgba, center_loc, <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">3</span>, lineType=cv2.LINE_AA)<br>                cv2.rectangle(img_rgba, (max_loc[<span class="hljs-number">0</span>], max_loc[<span class="hljs-number">1</span>]), (max_loc[<span class="hljs-number">0</span>] + w, max_loc[<span class="hljs-number">1</span>] + h), point_color,<br>                              thickness, lineType)<br><br>                cv2.imshow(<span class="hljs-string">&quot;asd&quot;</span>, img_rgba)<br>                d = [center_loc[<span class="hljs-number">0</span>] - (c[<span class="hljs-number">0</span>] + <span class="hljs-number">15</span>), center_loc[<span class="hljs-number">1</span>] - <span class="hljs-number">300</span>]<br><br>                change1 = <span class="hljs-number">2</span><br>                <span class="hljs-keyword">return</span> d<br>            <span class="hljs-keyword">else</span>:<br>                templatea = cv2.imread(<span class="hljs-string">&quot;f:\\test\\test&#x27;.png&quot;</span>)<br>                res = cv2.matchTemplate(img_rgba, templatea, cv2.TM_CCOEFF_NORMED)<br>                min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)<br>                h, w = templatea.shape[:<span class="hljs-number">2</span>]<br>                top_left = max_loc<br>                center_loc = ((<span class="hljs-built_in">int</span>)(max_loc[<span class="hljs-number">0</span>] + w + <span class="hljs-number">11</span>), <span class="hljs-built_in">int</span>(max_loc[<span class="hljs-number">1</span>] - <span class="hljs-number">2</span>))<br>                a = cv2.circle(img_rgba, center_loc, <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">3</span>, lineType=cv2.LINE_AA)<br>                cv2.rectangle(img_rgba, (max_loc[<span class="hljs-number">0</span>], max_loc[<span class="hljs-number">1</span>]), (max_loc[<span class="hljs-number">0</span>] + w, max_loc[<span class="hljs-number">1</span>] + h), point_color,<br>                              thickness, lineType)<br><br>                cv2.imshow(<span class="hljs-string">&quot;asd&quot;</span>, img_rgba)<br>                d = [center_loc[<span class="hljs-number">0</span>], center_loc[<span class="hljs-number">1</span>]]<br><br>                change1 = <span class="hljs-number">2</span><br>                <span class="hljs-keyword">return</span> d<br><br><br>        <span class="hljs-keyword">elif</span> pd == <span class="hljs-number">1</span>:<br>            d = [top[<span class="hljs-number">0</span>], top[<span class="hljs-number">1</span>] + <span class="hljs-number">37</span>]<br>            cv2.circle(img_copy2, (d[<span class="hljs-number">0</span>], d[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">2</span>, lineType=cv2.LINE_AA)<br>            cv2.imshow(<span class="hljs-string">&quot;img_cooy2&quot;</span>, img_copy2)<br><br>            <span class="hljs-keyword">return</span> d<br>        <span class="hljs-keyword">elif</span> pd == <span class="hljs-number">3</span>:<br>            d = [top[<span class="hljs-number">0</span>], top[<span class="hljs-number">1</span>] + <span class="hljs-number">20</span>]<br>            cv2.circle(img_copy2, (d[<span class="hljs-number">0</span>], d[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">2</span>, lineType=cv2.LINE_AA)<br>            cv2.imshow(<span class="hljs-string">&quot;img_cooy2&quot;</span>, img_copy2)<br><br>            <span class="hljs-keyword">return</span> d<br>        <span class="hljs-keyword">elif</span> pd == <span class="hljs-number">4</span>:<br>            d = [top[<span class="hljs-number">0</span>] + <span class="hljs-number">8</span>, top[<span class="hljs-number">1</span>] + <span class="hljs-number">42</span>]<br>            cv2.circle(img_copy2, (d[<span class="hljs-number">0</span>], d[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">2</span>, lineType=cv2.LINE_AA)<br>            cv2.imshow(<span class="hljs-string">&quot;img_cooy2&quot;</span>, img_copy2)<br><br>            <span class="hljs-keyword">return</span> d<br><br>a = -<span class="hljs-number">1</span><br>p = <span class="hljs-string">&quot;F:\\img\\&quot;</span><br>RemoveDir(p)<br>image = pyscreenshot.grab(bbox=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">450</span>, <span class="hljs-number">855</span>))<br>image.save(<span class="hljs-string">&quot;f:\\img\\Snipaste_2022.png&quot;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    pyautogui.press(<span class="hljs-string">&#x27;F1&#x27;</span>)<br>    pyautogui.hotkey(<span class="hljs-string">&#x27;Ctrl&#x27;</span>, <span class="hljs-string">&#x27;Shift&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>)<br>    a = a + <span class="hljs-number">1</span><br>    path = p + <span class="hljs-string">&quot;Snipaste_2022_&quot;</span> + <span class="hljs-built_in">str</span>(a) + <span class="hljs-string">&quot;.png&quot;</span><br>    img = cv2.imread(path)<br>    zhuan_shu_img = img.copy()<br>    img_rgb = img.copy()<br>    template = cv2.imread(<span class="hljs-string">&#x27;F:\Snipaste_2022_0.png&#x27;</span>)<br>    max_loc, h, w, center_loc = get_center(img, template)<br>    img = cv2.resize(img, (<span class="hljs-number">450</span>, <span class="hljs-number">855</span>), interpolation=cv2.INTER_CUBIC)<br>    center = ()<br>    length = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> center_loc[<span class="hljs-number">0</span>] &gt; img.shape[<span class="hljs-number">1</span>] / <span class="hljs-number">2</span>:<br><br>        img = img[<span class="hljs-number">315</span>:center_loc[<span class="hljs-number">1</span>], <span class="hljs-number">0</span>:center_loc[<span class="hljs-number">0</span>] - <span class="hljs-number">15</span>]<br>        img_copy2 = img.copy()<br>        img_fuzhi = img.copy()<br>        place = <span class="hljs-string">&quot;left&quot;</span><br>        <span class="hljs-keyword">try</span>:<br>            getimg, pd, arr = get_tol(img, change1)<br>        <span class="hljs-keyword">except</span>:<br>            pyautogui.moveTo(<span class="hljs-number">302</span>, <span class="hljs-number">751</span>)<br>            time.sleep(<span class="hljs-number">7</span>)<br>            pyautogui.click()<br>            time.sleep(<span class="hljs-number">0.5</span>)<br>            pyautogui.moveTo(<span class="hljs-number">850</span>, <span class="hljs-number">570</span>)<br>            time.sleep(<span class="hljs-number">7</span>)<br>            pyautogui.click()<br>            time.sleep(<span class="hljs-number">7</span>)<br>            pyautogui.moveTo(<span class="hljs-number">230</span>, <span class="hljs-number">360</span>)<br>            time.sleep(<span class="hljs-number">5</span>)<br>            pyautogui.hotkey(<span class="hljs-string">&#x27;shift&#x27;</span>, <span class="hljs-string">&#x27;F10&#x27;</span>)<br><br>        get_img = get_img1(getimg, place)<br><br>        center1 = get_c(get_img, place, img_fuzhi, pd, img, center_loc, arr)<br>        center2 = [img.shape[<span class="hljs-number">1</span>] + <span class="hljs-number">15</span>, img.shape[<span class="hljs-number">0</span>]]<br>        length = distance(center1, center2)<br>        time1 = get_time(length)<br>        dian_ji(time1)<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;时间&quot;</span>, time1)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;距离&quot;</span>, length)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;change1&quot;</span>, change1)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#####################################################&quot;</span>)<br><br>    <span class="hljs-keyword">else</span>:<br><br>        img = img[<span class="hljs-number">315</span>:center_loc[<span class="hljs-number">1</span>], center_loc[<span class="hljs-number">0</span>] + <span class="hljs-number">15</span>:img.shape[<span class="hljs-number">1</span>]]<br>        img_copy2 = img.copy()<br>        img_fuzhi = img.copy()<br>        place = <span class="hljs-string">&quot;r&quot;</span><br>        <span class="hljs-keyword">try</span>:<br>            getimg, pd, arr = get_tol(img, change1)<br>        <span class="hljs-keyword">except</span>:<br>            pyautogui.moveTo(<span class="hljs-number">302</span>, <span class="hljs-number">751</span>)<br>            time.sleep(<span class="hljs-number">7</span>)<br>            pyautogui.click()<br>            time.sleep(<span class="hljs-number">0.5</span>)<br>            pyautogui.moveTo(<span class="hljs-number">850</span>, <span class="hljs-number">570</span>)<br>            time.sleep(<span class="hljs-number">7</span>)<br>            pyautogui.click()<br>            time.sleep(<span class="hljs-number">7</span>)<br>            pyautogui.moveTo(<span class="hljs-number">230</span>, <span class="hljs-number">360</span>)<br>            time.sleep(<span class="hljs-number">5</span>)<br>            pyautogui.hotkey(<span class="hljs-string">&#x27;shift&#x27;</span>, <span class="hljs-string">&#x27;F10&#x27;</span>)<br><br>        get_img = get_img1(getimg, place)<br>        center1 = get_c(get_img, place, img_fuzhi, pd, zhuan_shu_img, center_loc, arr)<br>        center2 = [<span class="hljs-number">0</span> - <span class="hljs-number">15</span>, img.shape[<span class="hljs-number">0</span>]]<br>        length = distance(center1, center2)<br>        time1 = get_time(length)<br>        dian_ji(time1)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;时间&quot;</span>, time1)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;距离&quot;</span>, length)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;change1&quot;</span>, change1)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#####################################################&quot;</span>)<br><br>    cv2.waitKey(<span class="hljs-number">600</span>)<br>    time.sleep(<span class="hljs-number">0.8</span>)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br><br><br><br></code></pre></td></tr></table></figure><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>之前提到过，80%的代码都是在处理特殊情况，之前的算法是用<strong>均方差和一阶导数</strong>来排除干扰项目。现在是算法应该是曲线救国了，如果目标图形是在右边，那么就只关注最右侧的点，左边就只关注左边的点，剩下的特殊情况就针对它单独处理。比如这两种图形：</p><hr><img src="/images/跳一跳重制版/Snipaste_2022_9.png" style="zoom: 80%;"><img src="/images/跳一跳重制版/Snipaste_2022_10.png" style="zoom: 80%;"><hr><p>这两种图形的颜色分布是分布不均匀的，所以没办法用覆盖像素的方法来找到目标区域，所以直接用模板匹配把它匹配出来就彳亍了。</p><p>开端说过，本次算法在速度上有了质的飞跃，快在哪里。</p><p>假如跳到1w分，之前的版本可能用30分钟，现在只需要15分钟，只是举个例子，以实际为准。</p><p>在之前的代码中，扫描像素用了很多次双重for循环，导致程序运行速度很慢，而这次基本上双重for循环很少用，所以速度以下就快起来了。</p><p>所以，能不用嵌套循环，就别用。</p><h1 id="得到速度"><a href="#得到速度" class="headerlink" title="得到速度"></a>得到速度</h1><p>如果不是拯救者的电脑（因为我是）：</p><p>我直接明说，跳一跳的开局两个方块的距离的固定的</p><hr><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022_19.png"></p><hr><p>打开你们的windows自带的画图工具，手动找到两个点的坐标，手动算距离，再用下面的代码测试</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> pynput.mouse <span class="hljs-keyword">import</span> Button, Controller<br>mouse = Controller()<br>mouse.press(Button.left)<span class="hljs-comment">#模拟按压</span><br>time.sleep()<span class="hljs-comment">#模拟按下时间。从0.5开始测试，直到跳到正中心的位置</span><br>mouse.release(Button.left)<span class="hljs-comment">#模拟松开</span><br><br></code></pre></td></tr></table></figure><p>再用手动算出来的距离除以时间，得到速度，这个速度就是之后要用的速度。</p><p>拯救者的就不用了，直接copy</p><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p>右键之前提到的Snipaste的首选项，</p><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022_21.png">，改成这样。</p><p>把跳一跳放在一个合适的位置，用之前提到的OneQuick工具，Win+G将跳一跳窗口置顶，防止点其他地方窗口没了。</p><p>把鼠标放在跳一跳窗口内，然后别动了，按shift+f10启动程序。开始跑。</p><p>几万上十万分不成问题，打遍国内无敌手</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>网络协议深入了解wireshark抓包</title>
    <link href="/2022/12/25/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3wireshark%E6%8A%93%E5%8C%85/"/>
    <url>/2022/12/25/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3wireshark%E6%8A%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="一-疯狂聊天"><a href="#一-疯狂聊天" class="headerlink" title="一.疯狂聊天"></a>一.疯狂聊天</h1><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><p>链接：<a href="https://pan.baidu.com/s/1swrO0zQmzKCrD3gu63oz3g">https://pan.baidu.com/s/1swrO0zQmzKCrD3gu63oz3g</a><br>提取码：1111 </p><h2 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2.使用方法"></a>2.使用方法</h2><p>两台电脑在必须同一网络下</p><p>解压缩打开运行</p><p>crazychat.exe</p><p><img src="/../images/%E6%8A%93%E5%8C%85/a_1.png"></p><p>进入同一个聊天室测试能否收发消息</p><p><img src="/../images/%E6%8A%93%E5%8C%85/a_2.png"></p><h1 id="二-使用wireshark抓包"><a href="#二-使用wireshark抓包" class="headerlink" title="二.使用wireshark抓包"></a>二.使用wireshark抓包</h1><p>打开wireshark选择当前网络</p><p>通过代码我们得知程序通过udp协议想255.255.255.255发送信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self</span>):<br>msg = self.m_msg.GetValue().strip()<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> msg:<br><span class="hljs-keyword">return</span><br>self.m_msg.SetValue(<span class="hljs-string">u&#x27; &#x27;</span>)<br>msg = jc.toutf8(self.myname) + <span class="hljs-string">&quot;:&quot;</span> +jc.toutf8(msg)<br>self.udp.sendto(msg,( <span class="hljs-string">&#x27; 255.255.255.255&#x27;</span>，<span class="hljs-number">5000</span> + self.room))<br><br></code></pre></td></tr></table></figure><p>在wireshark中输入筛选<code>ip.dst==255.255.255.255</code>进行过滤</p><p>随便发送条消息，可以捕捉到</p><p><img src="/../images/%E6%8A%93%E5%8C%85/a_3.png"></p><h2 id="1）分析此程序网络连接采用的是哪种协议（TCP、UDP）和什么端口号？"><a href="#1）分析此程序网络连接采用的是哪种协议（TCP、UDP）和什么端口号？" class="headerlink" title="1）分析此程序网络连接采用的是哪种协议（TCP、UDP）和什么端口号？"></a>1）分析此程序网络连接采用的是哪种协议（TCP、UDP）和什么端口号？</h2><p>发送一条信息，可以看到是UDP协议，端口号是5000+0（聊天室）</p><p><img src="/../images/%E6%8A%93%E5%8C%85/a_4.png"></p><h2 id="2）试着在抓取包中找到窃取到的聊天信息-英文字符和汉字可能经过了某种编码转换，数据包中不是明文"><a href="#2）试着在抓取包中找到窃取到的聊天信息-英文字符和汉字可能经过了某种编码转换，数据包中不是明文" class="headerlink" title="2）试着在抓取包中找到窃取到的聊天信息 (英文字符和汉字可能经过了某种编码转换，数据包中不是明文)"></a>2）试着在抓取包中找到窃取到的聊天信息 (英文字符和汉字可能经过了某种编码转换，数据包中不是明文)</h2><p>在聊天室里发送几个文字</p><p><img src="/../images/%E6%8A%93%E5%8C%85/a_5.png"></p><p>抓包</p><p><img src="/../images/%E6%8A%93%E5%8C%85/a_6.png"></p><p>在聊天室里发送几个字母</p><p><img src="/../images/%E6%8A%93%E5%8C%85/a_7.png"></p><p>抓包</p><p><img src="/../images/%E6%8A%93%E5%8C%85/a_8.png"></p><p>由前面分析可得，发送数据使用的广播地址，这就是为什么该程序为何能够在多台电脑之间（只有是同一个聊天室编号）同时传输聊天数据。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>别踩白块儿物理外挂</title>
    <link href="/2022/09/03/%E5%88%AB%E8%B8%A9%E7%99%BD%E5%9D%97%E5%84%BF%E7%89%A9%E7%90%86%E5%A4%96%E6%8C%82/"/>
    <url>/2022/09/03/%E5%88%AB%E8%B8%A9%E7%99%BD%E5%9D%97%E5%84%BF%E7%89%A9%E7%90%86%E5%A4%96%E6%8C%82/</url>
    
    <content type="html"><![CDATA[<h1 id="两个版本，一强一弱"><a href="#两个版本，一强一弱" class="headerlink" title="两个版本，一强一弱"></a>两个版本，一强一弱</h1><h2 id="1-机械臂版本"><a href="#1-机械臂版本" class="headerlink" title="1.机械臂版本"></a>1.机械臂版本</h2><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=772625891&bvid=BV1F14y1s751&cid=822322863&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><h2 id="2-直接触发版本"><a href="#2-直接触发版本" class="headerlink" title="2.直接触发版本"></a>2.直接触发版本</h2><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=771901964&bvid=BV1n14y1b7Ky&cid=800840402&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><h1 id="直接触发版硬件"><a href="#直接触发版硬件" class="headerlink" title="直接触发版硬件"></a>直接触发版硬件</h1><h3 id="1-四路继电器-1"><a href="#1-四路继电器-1" class="headerlink" title="1.四路继电器 *1"></a>1.四路继电器 *1</h3><p><img src="/../images/%E5%88%AB%E8%B8%A9%E7%99%BD%E5%9D%97/1.png"></p><h3 id="2-Arduino-uno-1"><a href="#2-Arduino-uno-1" class="headerlink" title="2.Arduino uno *1"></a>2.Arduino uno *1</h3><h3 id="3-导电硅胶-4"><a href="#3-导电硅胶-4" class="headerlink" title="3.导电硅胶 *4"></a>3.导电硅胶 *4</h3><p><img src="/../images/%E5%88%AB%E8%B8%A9%E7%99%BD%E5%9D%97/3.png"></p><h3 id="4-光敏电阻模块-4"><a href="#4-光敏电阻模块-4" class="headerlink" title="4.光敏电阻模块 *4"></a>4.光敏电阻模块 *4</h3><p><img src="/../images/%E5%88%AB%E8%B8%A9%E7%99%BD%E5%9D%97/2.png"></p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="电磁继电器原理"><a href="#电磁继电器原理" class="headerlink" title="电磁继电器原理"></a>电磁继电器原理</h2><p>当AB端断开，电器1工作。</p><p><img src="/../images/%E5%88%AB%E8%B8%A9%E7%99%BD%E5%9D%97/4.png"></p><p>当AB端通电，即AB端有电势差，电器2工作。</p><p><img src="/../images/%E5%88%AB%E8%B8%A9%E7%99%BD%E5%9D%97/5.png"></p><p>这样就整个外挂的原理有凸显出来了：</p><p>Arduino接收光敏电阻的变化，黑和白（也不完全白），如果是黑则输出高电平，如果是白则输出低电平，继电器接收不同的高低电平来输出给导电硅胶进行触发。</p><h1 id="模拟点击屏幕"><a href="#模拟点击屏幕" class="headerlink" title="模拟点击屏幕"></a>模拟点击屏幕</h1><p>手指点击屏幕是通过感应电流触发电容屏，同样我们可以用这个导电硅胶来代替手指，手指触摸导线&#x3D;点击一次。</p><p><img src="/../images/%E5%88%AB%E8%B8%A9%E7%99%BD%E5%9D%97/7.gif"></p><h1 id="继电器部分的接线"><a href="#继电器部分的接线" class="headerlink" title="继电器部分的接线"></a>继电器部分的接线</h1><p>继电器的输入端与Arduino输出高低电平的引脚相连，比如Arduino的8号引脚是输出的高电平，则8号引脚与继电器的输入端连接，继电器的NO端与导电硅胶相连，COM端与接地相连，可以用手或者电池负极来代替接地。</p><h1 id="Arduino代码"><a href="#Arduino代码" class="headerlink" title="Arduino代码"></a>Arduino代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br>Serial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">9600</span>);<br><span class="hljs-built_in">pinMode</span>(<span class="hljs-number">8</span>, OUTPUT);<span class="hljs-comment">//四个高低电平输出引脚</span><br><span class="hljs-built_in">pinMode</span>(<span class="hljs-number">9</span>, OUTPUT);<br><span class="hljs-built_in">pinMode</span>(<span class="hljs-number">10</span>, OUTPUT);<br><span class="hljs-built_in">pinMode</span>(<span class="hljs-number">11</span>,OUTPUT);<br>&#125;<br><span class="hljs-comment">//判断黑白块,0为白，1为黑</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">is_black_or_white</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(a&lt;<span class="hljs-number">515</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> sensorValue = <span class="hljs-built_in">analogRead</span>(A0);<span class="hljs-comment">//四个光敏电阻的阻值</span><br><span class="hljs-type">int</span> sensorValue1 = <span class="hljs-built_in">analogRead</span>(A1);<br><span class="hljs-type">int</span> sensorValue2= <span class="hljs-built_in">analogRead</span>(A2);<br><span class="hljs-type">int</span> sensorValue3 = <span class="hljs-built_in">analogRead</span>(A3);<br><span class="hljs-type">int</span> a=<span class="hljs-built_in">is_black_or_white</span>(sensorValue);<br><span class="hljs-type">int</span> b=<span class="hljs-built_in">is_black_or_white</span>(sensorValue1);<br><span class="hljs-type">int</span> c=<span class="hljs-built_in">is_black_or_white</span>(sensorValue2);<br><span class="hljs-type">int</span> d=<span class="hljs-built_in">is_black_or_white</span>(sensorValue3);<br>Serial.<span class="hljs-built_in">print</span>(a);<br>Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>Serial.<span class="hljs-built_in">print</span>(b);<br>Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>Serial.<span class="hljs-built_in">print</span>(c);<br>Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>Serial.<span class="hljs-built_in">println</span>(d);<br><span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//判断是否要同时点击两个块，</span><br><span class="hljs-keyword">if</span>(a^b^c^d==<span class="hljs-number">1</span>) &#123;<br>count=<span class="hljs-number">1</span>;<br>&#125;<br>    <span class="hljs-comment">//只点击一个块</span><br><span class="hljs-keyword">if</span>(count==<span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span>(sensorValue&gt;<span class="hljs-number">515</span>) &#123;<br><span class="hljs-built_in">digitalWrite</span>(<span class="hljs-number">8</span>, HIGH);<span class="hljs-comment">//8号引脚输出高电平</span><br><span class="hljs-built_in">delay</span>(<span class="hljs-number">19</span>);<br><span class="hljs-built_in">digitalWrite</span>(<span class="hljs-number">8</span>, LOW);<span class="hljs-comment">//8号引脚输出低电平</span><br><span class="hljs-built_in">delay</span>(<span class="hljs-number">9</span>);<br>            <span class="hljs-comment">//完成一次点击</span><br>&#125;<br><span class="hljs-keyword">if</span>(sensorValue1&gt;<span class="hljs-number">515</span>) &#123;<br><span class="hljs-built_in">digitalWrite</span>(<span class="hljs-number">9</span>, HIGH);<br><span class="hljs-built_in">delay</span>(<span class="hljs-number">19</span>);<br><span class="hljs-built_in">digitalWrite</span>(<span class="hljs-number">9</span>, LOW);<br><span class="hljs-built_in">delay</span>(<span class="hljs-number">9</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(sensorValue2&gt;<span class="hljs-number">515</span>) &#123;<br><span class="hljs-built_in">digitalWrite</span>(<span class="hljs-number">10</span>, HIGH);<br><span class="hljs-built_in">delay</span>(<span class="hljs-number">19</span>);<br><span class="hljs-built_in">digitalWrite</span>(<span class="hljs-number">10</span>, LOW);<br><span class="hljs-built_in">delay</span>(<span class="hljs-number">9</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(sensorValue3&gt;<span class="hljs-number">515</span>) &#123;<br><span class="hljs-built_in">digitalWrite</span>(<span class="hljs-number">11</span>, HIGH);<br><span class="hljs-built_in">delay</span>(<span class="hljs-number">19</span>);<br><span class="hljs-built_in">digitalWrite</span>(<span class="hljs-number">11</span>, LOW);<br><span class="hljs-built_in">delay</span>(<span class="hljs-number">9</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>跳一跳物理外挂</title>
    <link href="/2022/07/28/%E8%B7%B3%E4%B8%80%E8%B7%B3%E7%89%A9%E7%90%86%E5%A4%96%E6%8C%82/"/>
    <url>/2022/07/28/%E8%B7%B3%E4%B8%80%E8%B7%B3%E7%89%A9%E7%90%86%E5%A4%96%E6%8C%82/</url>
    
    <content type="html"><![CDATA[<p>先装一下<img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022_22.png"></p><p>思路：这个脚本全部围绕着找到两个点的坐标（棋子中心点，目标中心点），找到这两个坐标，在计算距离<strong>d</strong>,在除以速度v，得到需要跳跃的时间<strong>t</strong>，在用python控制鼠标按下时间。<strong>整个过程其实是偏向纯数学的东西</strong><em>，</em><strong>是不是觉得很简单</strong>。接着看，找到两个点的坐标我想了3种方法，鄙人取名为（老实憨厚<strong>）（</strong>精准又优雅<strong>）（</strong>投机取巧）</p><p>进去正题。</p><h1 id="准备东西"><a href="#准备东西" class="headerlink" title="准备东西"></a>准备东西</h1><p>1，用python写的，主要是C++的opencv太难写了，但是如果追求速度，害得是C++，python有点慢</p><p>2，安利两个实用工具，也是要用到的工具</p><p><a href="https://www.snipaste.com/">Snipaste</a>,截图贴图工具，截的图可以贴在旁边，非常方便。</p><p><a href="https://onequick.org/?f=app">OneQuick</a>,窗口置顶工具，想让某个窗口置顶就鼠标移上去按Win+G,默认的好像是Win+G。</p><p>都是微软的。</p><p>3，微信电脑版，要用跳一跳。</p><p>over。</p><h1 id="1，老实憨厚版"><a href="#1，老实憨厚版" class="headerlink" title="1，老实憨厚版"></a>1，老实憨厚版</h1><h2 id="找棋子坐标"><a href="#找棋子坐标" class="headerlink" title="找棋子坐标"></a>找棋子坐标</h2><p>看下面的图，分析特点。</p><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022.png"></p><img src="/images/跳一跳/Snipaste_2022.png" style="zoom: 67%;"><p>棋子桌标就是棋子的脚底下的中心点，找到他其实很简单，用opencv库的模板匹配。</p><p>我们首先要准备一张棋子的模板，如图</p><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022_0.png"></p><p>距离把它包裹住并且贴紧，然后用它来匹配原图像，</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br>img = cv2.imread(<span class="hljs-string">&quot;f:\Snipaste_2022.png&quot;</span>)<br>template = cv2.imread(<span class="hljs-string">&#x27;f:\Snipaste_2022_0.png&#x27;</span>)<br>res = cv2.matchTemplate(img, template, cv2.TM_CCOEFF_NORMED)<br>min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)<br>h, w = template.shape[:<span class="hljs-number">2</span>]<br>top_left = max_loc<br>center_loc = ((<span class="hljs-built_in">int</span>)(max_loc[<span class="hljs-number">0</span>] + w ), <span class="hljs-built_in">int</span>(max_loc[<span class="hljs-number">1</span>] + h ) )<br>cv2.rectangle(img, max_loc, center_loc, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">1</span>, <span class="hljs-number">8</span>)<br>cv2.imshow(<span class="hljs-string">&quot;sad&quot;</span>,img)<br>cv2.waitKey(<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>结果像这样：</p><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022_1.png"></p><p>这个矩形的坐标是知道的，找到脚底下的坐标不言而喻了吧。</p><h2 id="找目标点坐标"><a href="#找目标点坐标" class="headerlink" title="找目标点坐标"></a>找目标点坐标</h2><p>首先我们要知道，为了找到目标点坐标，哪些东西有用哪些东西没用。</p><p>看图：</p><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022_2.png"></p><p>棋子一下的部分不需要吧，记分数字上面的东西不需要吧，当然棋子的右半身也不需要吧，需要的部分只有棋子的右上部分，所以我们需要把一整张图剪切成那样，</p><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022_4.png"></p><p>接下来的工作就是用到opencv的边缘检测了</p><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022_5.png"></p><p>可以发现，这一次目标点是在右边的，所以我们只要找到最上方的点和最右方的点，如果目标点是在左边，那么我们只要找到最左边点和最上方的点，就可以简单得出目标点中心的坐标。</p><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022_6.png"></p><p>这样两个点的坐标就找到了，在计算两点的位置，大致就完成了。</p><p>完整代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> ImageGrab<br><span class="hljs-keyword">from</span> pynput.mouse <span class="hljs-keyword">import</span> Button, Controller<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>pt1 = (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>pt2 = (<span class="hljs-number">291</span>, <span class="hljs-number">0</span>)<br>pt3 = (<span class="hljs-number">291</span>, <span class="hljs-number">428</span>)<br>pt4 = (<span class="hljs-number">140</span>, <span class="hljs-number">516</span>)<br>pt5 = (<span class="hljs-number">0</span>, <span class="hljs-number">516</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_center</span>(<span class="hljs-params">img_rgb, template</span>):<br>    res = cv2.matchTemplate(img_rgb, template, cv2.TM_CCOEFF_NORMED)<br>    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)<br>    h, w = template.shape[:<span class="hljs-number">2</span>]<br>    top_left = max_loc<br>    center_loc = ((<span class="hljs-built_in">int</span>)(max_loc[<span class="hljs-number">0</span>] + w / <span class="hljs-number">2</span>), <span class="hljs-built_in">int</span>(max_loc[<span class="hljs-number">1</span>] + h / <span class="hljs-number">2</span>) + <span class="hljs-number">36</span>)<br>    a = cv2.circle(img_rgb, center_loc, <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">3</span>, lineType=cv2.LINE_AA)<br><br>    <span class="hljs-keyword">return</span> max_loc, h, w, center_loc<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">math_point</span>(<span class="hljs-params">p, center_loc, k</span>):<br>    <span class="hljs-comment"># y=-0.58*x+a*0.58+b</span><br>    y1 = k * center_loc[<span class="hljs-number">0</span>] + p[<span class="hljs-number">0</span>] * (-k) + p[<span class="hljs-number">1</span>]<br>    y1 = <span class="hljs-built_in">int</span>(y1)<br>    x2 = (p[<span class="hljs-number">0</span>] * (-k) + p[<span class="hljs-number">1</span>] - center_loc[<span class="hljs-number">1</span>]) / (-k)<br>    x2 = <span class="hljs-built_in">int</span>(x2)<br><br>    p1 = (center_loc[<span class="hljs-number">0</span>], y1)<br>    p2 = (x2, center_loc[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> p1, p2<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_img1</span>(<span class="hljs-params">img, max_loc, center_loc, k</span>):<br>    pt_1 = ()<br>    pt_2 = ()<br>    pt_3 = ()<br>    pt_4 = ()<br>    pt_5 = ()<br>    <span class="hljs-keyword">if</span> k &lt; <span class="hljs-number">0</span>:<br>        pt_1 = (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>        pt_2 = (center_loc[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>)<br>        pt_3, pt_4 = math_point(max_loc, center_loc, k)<br>        pt_5 = (<span class="hljs-number">0</span>, center_loc[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">else</span>:<br>        pt_1 = (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>        pt_2 = (img.shape[<span class="hljs-number">1</span>], <span class="hljs-number">0</span>)<br>        pt_3 = (img.shape[<span class="hljs-number">1</span>], img.shape[<span class="hljs-number">0</span>])<br>        p = (max_loc[<span class="hljs-number">0</span>] + <span class="hljs-number">40</span>, max_loc[<span class="hljs-number">1</span>])<br>        pt_5, pt_4 = math_point(p, center_loc, k)<br><br>    blank = np.zeros(img.shape[:<span class="hljs-number">2</span>], dtype=<span class="hljs-string">&#x27;uint8&#x27;</span>)<br>    cv2.circle(blank, pt_1, <span class="hljs-number">1</span>, (<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>), -<span class="hljs-number">1</span>)<br>    cv2.circle(blank, pt_2, <span class="hljs-number">1</span>, (<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>), -<span class="hljs-number">1</span>)<br>    cv2.circle(blank, pt_3, <span class="hljs-number">1</span>, (<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>), -<span class="hljs-number">1</span>)<br>    cv2.circle(blank, pt_4, <span class="hljs-number">1</span>, (<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>), -<span class="hljs-number">1</span>)<br>    cv2.circle(blank, pt_5, <span class="hljs-number">1</span>, (<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>), -<span class="hljs-number">1</span>)<br>    triangle_cnt = np.array([pt_1, pt_2, pt_3, pt_4, pt_5])<br><br>    mask = cv2.drawContours(blank, [triangle_cnt], <span class="hljs-number">0</span>, (<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>), -<span class="hljs-number">1</span>)<br>    m = cv2.bitwise_and(img, img, mask=mask)<br>    <span class="hljs-keyword">return</span> m<br><br><br>lowThreshold = <span class="hljs-number">0</span><br>max_lowThreshold = <span class="hljs-number">255</span><br>ratio = <span class="hljs-number">3</span><br>kernel_size = <span class="hljs-number">3</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_left</span>(<span class="hljs-params">masked, gray</span>):<br>    <span class="hljs-comment"># detected_edges = cv2.GaussianBlur(gray, (3, 3), 0)</span><br>    detected_edges = cv2.Canny(masked, <span class="hljs-number">30</span>, <span class="hljs-number">30</span> * ratio, apertureSize=kernel_size)<br>    dst = cv2.bitwise_and(masked, masked, mask=detected_edges)  <span class="hljs-comment"># just add some colours to edges from original image.</span><br><br>    lap = masked.copy()<br>    contours, hierarchy = cv2.findContours(image=detected_edges, mode=cv2.RETR_EXTERNAL, method=cv2.CHAIN_APPROX_SIMPLE)<br>    <span class="hljs-built_in">max</span> = <span class="hljs-number">50000</span><br>    <span class="hljs-built_in">min</span> = <span class="hljs-number">50000</span><br>    a = []<br>    b = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i])):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i][j])):<br>                <span class="hljs-keyword">if</span> contours[i][j][k][<span class="hljs-number">1</span>] &lt; <span class="hljs-built_in">min</span>:<br>                    <span class="hljs-built_in">min</span> = contours[i][j][k][<span class="hljs-number">1</span>]<br>                <span class="hljs-keyword">if</span> contours[i][j][k][<span class="hljs-number">0</span>] &lt; <span class="hljs-built_in">max</span>:<br>                    <span class="hljs-built_in">max</span> = contours[i][j][k][<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i])):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i][j])):<br>                <span class="hljs-keyword">if</span> contours[i][j][k][<span class="hljs-number">1</span>] == <span class="hljs-built_in">min</span>:<br>                    a = contours[i][j][k]<br>                <span class="hljs-keyword">if</span> contours[i][j][k][<span class="hljs-number">0</span>] == <span class="hljs-built_in">max</span>:<br>                    b.append(contours[i][j][k])<br><br>    Min = <span class="hljs-number">50000</span><br>    c = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(b)):<br>        <span class="hljs-keyword">if</span> b[i][<span class="hljs-number">1</span>] &lt; Min:<br>            c = b[i]<br><br>    c = [c[<span class="hljs-number">0</span>], c[<span class="hljs-number">1</span>] + <span class="hljs-number">5</span>]<br>    d = [a[<span class="hljs-number">0</span>], c[<span class="hljs-number">1</span>]]<br><br>    center = (a[<span class="hljs-number">0</span>], <span class="hljs-built_in">int</span>((a[<span class="hljs-number">1</span>] + d[<span class="hljs-number">1</span>]) / <span class="hljs-number">2</span>))<br>    <span class="hljs-built_in">print</span>(center)<br>    cv2.circle(lap, (center[<span class="hljs-number">0</span>], center[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">3</span>, lineType=cv2.LINE_AA)<br>    cv2.circle(lap, (a[<span class="hljs-number">0</span>], a[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">3</span>, lineType=cv2.LINE_AA)<br>    cv2.circle(lap, (c[<span class="hljs-number">0</span>], c[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">3</span>, lineType=cv2.LINE_AA)<br>    cv2.circle(lap, (d[<span class="hljs-number">0</span>], d[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">3</span>, lineType=cv2.LINE_AA)<br>    cv2.drawContours(image=lap, contours=contours, contourIdx=-<span class="hljs-number">1</span>, color=(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), thickness=<span class="hljs-number">1</span>,<br>                     lineType=cv2.LINE_AA)<br>    cv2.imshow(<span class="hljs-string">&#x27;canny demo&#x27;</span>, lap)<br>    <span class="hljs-keyword">return</span> center<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_right</span>(<span class="hljs-params">masked, gray</span>):<br>    <span class="hljs-comment"># detected_edges = cv2.GaussianBlur(gray, (3, 3), 0)</span><br>    detected_edges = cv2.Canny(masked, <span class="hljs-number">45</span>, <span class="hljs-number">40</span> * ratio, apertureSize=kernel_size)<br>    dst = cv2.bitwise_and(masked, masked, mask=detected_edges)  <span class="hljs-comment"># just add some colours to edges from original image.</span><br>    lap = masked.copy()<br>    contours, hierarchy = cv2.findContours(image=detected_edges, mode=cv2.RETR_EXTERNAL, method=cv2.CHAIN_APPROX_SIMPLE)<br>    <span class="hljs-built_in">max</span> = <span class="hljs-number">0</span><br>    <span class="hljs-built_in">min</span> = <span class="hljs-number">50000</span><br>    a = []<br>    b = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i])):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i][j])):<br>                <span class="hljs-keyword">if</span> contours[i][j][k][<span class="hljs-number">1</span>] &lt; <span class="hljs-built_in">min</span>:<br>                    <span class="hljs-built_in">min</span> = contours[i][j][k][<span class="hljs-number">1</span>]<br>                <span class="hljs-keyword">if</span> contours[i][j][k][<span class="hljs-number">0</span>] &gt; <span class="hljs-built_in">max</span>:<br>                    <span class="hljs-built_in">max</span> = contours[i][j][k][<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i])):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i][j])):<br>                <span class="hljs-keyword">if</span> contours[i][j][k][<span class="hljs-number">1</span>] == <span class="hljs-built_in">min</span>:<br>                    a = contours[i][j][k]<br>                <span class="hljs-keyword">if</span> contours[i][j][k][<span class="hljs-number">0</span>] == <span class="hljs-built_in">max</span>:<br>                    b.append(contours[i][j][k])<br><br>    Min = <span class="hljs-number">50000</span><br>    c = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(b)):<br>        <span class="hljs-keyword">if</span> b[i][<span class="hljs-number">1</span>] &lt; Min:<br>            c = b[i]<br><br>    d = (a[<span class="hljs-number">0</span>], c[<span class="hljs-number">1</span>])<br><br>    cv2.circle(lap, (a[<span class="hljs-number">0</span>], a[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">3</span>, lineType=cv2.LINE_AA)<br>    cv2.circle(lap, (c[<span class="hljs-number">0</span>], c[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">3</span>, lineType=cv2.LINE_AA)<br>    cv2.circle(lap, (d[<span class="hljs-number">0</span>], d[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">3</span>, lineType=cv2.LINE_AA)<br>    cv2.drawContours(image=lap, contours=contours, contourIdx=-<span class="hljs-number">1</span>, color=(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), thickness=<span class="hljs-number">1</span>,<br>                     lineType=cv2.LINE_AA)<br>    cv2.imshow(<span class="hljs-string">&#x27;canny demo&#x27;</span>, lap)<br>    <span class="hljs-keyword">return</span> d<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">distance</span>(<span class="hljs-params">a, b</span>):<br>    p1 = np.array(a)<br>    p2 = np.array(b)<br>    p3 = p1 - p2<br>    <span class="hljs-built_in">print</span>(p3)<br>    p4 = math.hypot(p3[<span class="hljs-number">0</span>], p3[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> p4<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_time</span>(<span class="hljs-params">length</span>):<br>    time = length / <span class="hljs-number">306.001158116</span><br>    <span class="hljs-keyword">return</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dian_ji</span>(<span class="hljs-params">time1</span>):<br>    mouse = Controller()<br>    mouse.press(Button.left)<br>    time.sleep(time1)<br>    mouse.release(Button.left)<br><br><br>a = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-comment">#把你的跳一跳放在左上角位置，对齐。</span><br>    ss_region = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">450</span>, <span class="hljs-number">855</span>)  <span class="hljs-comment"># 距离左上右下的像素</span><br>    ss_img = ImageGrab.grab(ss_region)<br>    <span class="hljs-comment">#f盘自己创建一个img文件夹，可以换其他盘</span><br>    p = <span class="hljs-string">&quot;F:\\img\\&quot;</span><br>    a = a + <span class="hljs-number">1</span><br>    path = p + <span class="hljs-string">&quot;PILImage&quot;</span> + <span class="hljs-built_in">str</span>(a) + <span class="hljs-string">&quot;.jpg&quot;</span><br><br>    ss_img.save(path)<br>    img = cv2.imread(path)<br><br>    img_rgb = img.copy()<br>    template = cv2.imread(<span class="hljs-string">&#x27;F:\Snipaste_2022-07-21_03-20-01.png&#x27;</span>)<span class="hljs-comment">#这是棋子的图片</span><br>    max_loc, h, w, center_loc = get_center(img, template)<br><br>    img = cv2.resize(img, (<span class="hljs-number">450</span>, <span class="hljs-number">855</span>), interpolation=cv2.INTER_CUBIC)<span class="hljs-comment">#这个（450，855）是跳一跳图片的大小，把截图按住就可以显示大小</span><br><br>    center = ()<br>    length = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 左</span><br>    <span class="hljs-keyword">if</span> center_loc[<span class="hljs-number">0</span>] &gt; img.shape[<span class="hljs-number">1</span>] / <span class="hljs-number">2</span>:<br>        masked = get_img1(img, max_loc, center_loc, -<span class="hljs-number">1</span>)<br>        masked = masked[<span class="hljs-number">200</span>:center_loc[<span class="hljs-number">1</span>], <span class="hljs-number">0</span>:center_loc[<span class="hljs-number">0</span>] - <span class="hljs-number">15</span>]<br>        gray = cv2.cvtColor(masked, cv2.COLOR_BGR2GRAY)<br>        masked = cv2.GaussianBlur(masked, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), <span class="hljs-number">0</span>)<br>        center = find_left(masked, gray)<br>        length = distance((masked.shape[<span class="hljs-number">1</span>] + <span class="hljs-number">15</span>, masked.shape[<span class="hljs-number">0</span>]), center)<br>        time1 = get_time(length)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;时间&quot;</span>, time1)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;距离&quot;</span>, length)<br>        dian_ji(time1)<br>    <span class="hljs-keyword">else</span>:<br>        masked = get_img1(img, max_loc, center_loc, <span class="hljs-number">1</span>)<br>        masked = masked[<span class="hljs-number">200</span>:center_loc[<span class="hljs-number">1</span>], center_loc[<span class="hljs-number">0</span>] + <span class="hljs-number">15</span>:img.shape[<span class="hljs-number">1</span>]]<br>        gray = cv2.cvtColor(masked, cv2.COLOR_BGR2GRAY)<br>        masked = cv2.GaussianBlur(masked, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), <span class="hljs-number">0</span>)<br>        center = find_right(masked, gray)<br>        length = distance((<span class="hljs-number">0</span> - <span class="hljs-number">15</span>, masked.shape[<span class="hljs-number">0</span>]), center)<br>        time1 = get_time(length)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;时间&quot;</span>, time1)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;距离&quot;</span>, length)<br>        dian_ji(time1)<br><br>    cv2.imshow(<span class="hljs-string">&quot;mask&quot;</span>, masked)<br>    cv2.waitKey(<span class="hljs-number">500</span>)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure><p><strong>具体怎么操作末尾再说，这个方法可以用，但不推荐，所以注释就没写，玩玩就彳亍。</strong></p><h1 id="2，精准又优雅版"><a href="#2，精准又优雅版" class="headerlink" title="2，精准又优雅版"></a>2，精准又优雅版</h1><p>找棋子坐标都是一样的，不用多说了。</p><p>重点是找目标点。</p><h2 id="目标点坐标"><a href="#目标点坐标" class="headerlink" title="目标点坐标"></a>目标点坐标</h2><p>随便拿个图：</p><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022_7.png"></p><p>仔细看目标方块，它的表面是有颜色的，这张图是绿色，表示为（R，G，B）,比如黑色（0，0，0），白色（255，255，255），每个颜色都有个颜色值，所以从这里入手。</p><p>一张图片是有很多像素点组成的，一个像素点就代表一个颜色，一张大小为（50x50）的图片有50*50&#x3D;2500个像素点，我们可以从图片的有效区域（经过裁剪后的区域），从上往下扫描，找到第一个颜色变化最大的点，那么这个点就是目标方块表面的颜色（比如这张图第一个颜色变化最大的点是直角那个点，是绿色（100，149，105）），然后我们 把整张图不是（100，149，105）的像素点全部设置为（0，0，0）也就是涂黑</p><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022_8.png"></p><p>涂黑后</p><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022_9.png"></p><p>当然，这个情况就属于特殊情况，因为棋子的地面也是相同的颜色，所以需要进行特殊处理，整篇代码有80%都是在处理特殊情况，因为跳一跳每一次都是不确定的，所以需要考虑全面。</p><p>我换一张正常的，</p><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022_11.png"></p><p>涂黑后</p><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022_12.png"></p><p>这张图就比较明显了，只有两个颜色区域，有的小伙伴就发动大脑了，找到中点坐标现在很简单啊，找到绿色的最左边和最后边，在求个中点不就行了？</p><p>可以，想法很好，但是如果是上面那种情况呢，左下角存在影响因素，这样最左边的坐标就是（0，y）,显然算出来的是错的，</p><p>所以我们依然得用边缘检测，然后再用特殊处理把明显不是我们需要的信息过滤掉，最后边沿检测算出来的结果如下：</p><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022_13.png"></p><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022_14.png"></p><p>给大家看一种典型的特殊情况吧，</p><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022_15.png"></p><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022_16.png"></p><p>算出来依然是准确的，特殊情况不止这一种类型，你永远不知道下一步方块是<strong>什么tm奇葩形状，什么tm奇葩位置</strong></p><p>也永远不知道下一步会出现<strong>什么tm奇葩特殊情况</strong>，我遇到过最奇葩的：</p><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022_17.png"></p><p>这俩大小完全粘在一起了。</p><p>处理这些情况需要大量的算法，所以我说有80%的代码都在处理这些。</p><p>完整代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> shutil<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> win32con<br><span class="hljs-keyword">import</span> win32gui<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> ImageGrab<br><span class="hljs-keyword">from</span> pynput.mouse <span class="hljs-keyword">import</span> Button, Controller<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> pyscreenshot<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pyautogui<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> *<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">math_point</span>(<span class="hljs-params">p, center_loc, k</span>):<br>    <span class="hljs-comment"># y=-0.58*x+a*0.58+b</span><br>    y1 = k * center_loc[<span class="hljs-number">0</span>] + p[<span class="hljs-number">0</span>] * (-k) + p[<span class="hljs-number">1</span>]<br>    y1 = <span class="hljs-built_in">int</span>(y1)<br>    x2 = (p[<span class="hljs-number">0</span>] * (-k) + p[<span class="hljs-number">1</span>] - center_loc[<span class="hljs-number">1</span>]) / (-k)<br>    x2 = <span class="hljs-built_in">int</span>(x2)<br><br>    p1 = (center_loc[<span class="hljs-number">0</span>], y1)<br>    p2 = (x2, center_loc[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> p1, p2<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_img1</span>(<span class="hljs-params">img, k</span>):<br>    pt_1 = ()<br>    pt_2 = ()<br>    pt_3 = ()<br>    pt_4 = ()<br>    pt_5 = ()<br>    <span class="hljs-keyword">if</span> k &lt; <span class="hljs-number">0</span>:<br>        pt_1 = (img.shape[<span class="hljs-number">1</span>], img.shape[<span class="hljs-number">0</span>])<br>        pt_2 = (img.shape[<span class="hljs-number">1</span>], img.shape[<span class="hljs-number">0</span>] - <span class="hljs-number">30</span>)<br>        pt_3 = (img.shape[<span class="hljs-number">1</span>] - <span class="hljs-number">50</span>, img.shape[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">else</span>:<br>        pt_1 = (<span class="hljs-number">0</span>, img.shape[<span class="hljs-number">0</span>] - <span class="hljs-number">30</span>)<br>        pt_2 = (<span class="hljs-number">0</span>, img.shape[<span class="hljs-number">0</span>])<br>        pt_3 = (<span class="hljs-number">50</span>, img.shape[<span class="hljs-number">0</span>])<br><br>    blank = np.ones(img.shape[:<span class="hljs-number">2</span>], dtype=<span class="hljs-string">&#x27;uint8&#x27;</span>)<br>    cv2.circle(blank, pt_1, <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), -<span class="hljs-number">1</span>)<br>    cv2.circle(blank, pt_2, <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), -<span class="hljs-number">1</span>)<br>    cv2.circle(blank, pt_3, <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), -<span class="hljs-number">1</span>)<br><br>    triangle_cnt = np.array([pt_1, pt_2, pt_3])<br><br>    mask = cv2.drawContours(blank, [triangle_cnt], <span class="hljs-number">0</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), -<span class="hljs-number">1</span>)<br>    m = cv2.bitwise_and(img, img, mask=mask)<br>    cv2.imshow(<span class="hljs-string">&quot;m&quot;</span>, m)<br>    hwnd = win32gui.FindWindow(<span class="hljs-literal">None</span>, <span class="hljs-string">&quot;m&quot;</span>)  <span class="hljs-comment"># 获取句柄，然后置顶</span><br>    CVRECT = cv2.getWindowImageRect(<span class="hljs-string">&quot;m&quot;</span>)<br>    win32gui.SetWindowPos(hwnd, win32con.HWND_TOPMOST, <span class="hljs-number">610</span>, <span class="hljs-number">125</span>, m.shape[<span class="hljs-number">1</span>] + <span class="hljs-number">10</span>, m.shape[<span class="hljs-number">0</span>] + <span class="hljs-number">40</span>,<br>                          win32con.SWP_SHOWWINDOW)<br>    <span class="hljs-keyword">return</span> m<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">distance</span>(<span class="hljs-params">a, b</span>):<br>    p1 = np.array(a)<br>    p2 = np.array(b)<br>    p3 = p1 - p2<br>    <span class="hljs-built_in">print</span>(p3)<br>    p4 = math.hypot(p3[<span class="hljs-number">0</span>], p3[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> p4<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_time</span>(<span class="hljs-params">length</span>):<br>    time = length / <span class="hljs-number">306.001158116</span><br>    <span class="hljs-keyword">return</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dian_ji</span>(<span class="hljs-params">time1</span>):<br>    mouse = Controller()<br>    mouse.press(Button.left)<br>    time.sleep(time1)<br>    mouse.release(Button.left)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_center</span>(<span class="hljs-params">img_rgb, template</span>):<br>    res = cv2.matchTemplate(img_rgb, template, cv2.TM_CCOEFF_NORMED)<br>    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)<br>    h, w = template.shape[:<span class="hljs-number">2</span>]<br>    top_left = max_loc<br>    center_loc = ((<span class="hljs-built_in">int</span>)(max_loc[<span class="hljs-number">0</span>] + w / <span class="hljs-number">2</span>), <span class="hljs-built_in">int</span>(max_loc[<span class="hljs-number">1</span>] + h / <span class="hljs-number">2</span>) + <span class="hljs-number">36</span>)<br>    a = cv2.circle(img_rgb, center_loc, <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">3</span>, lineType=cv2.LINE_AA)<br><br>    <span class="hljs-keyword">return</span> max_loc, h, w, center_loc<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_area</span>(<span class="hljs-params">p1, p2</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(p1[<span class="hljs-number">0</span>] - p2[<span class="hljs-number">0</span>]) * <span class="hljs-built_in">abs</span>(p1[<span class="hljs-number">1</span>] - p2[<span class="hljs-number">1</span>])<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pd_is_max</span>(<span class="hljs-params">contours</span>):<br>    Max = <span class="hljs-number">0</span><br>    Min = <span class="hljs-number">50000</span><br>    a = []<br>    b = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i])):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i][j])):<br>                <span class="hljs-keyword">if</span> contours[i][j][k][<span class="hljs-number">0</span>] &lt; Min:<br>                    Min = contours[i][j][k][<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i])):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i][j])):<br>                <span class="hljs-keyword">if</span> contours[i][j][k][<span class="hljs-number">0</span>] &gt; Max:<br>                    Max = contours[i][j][k][<span class="hljs-number">0</span>]<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i])):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i][j])):<br>                <span class="hljs-keyword">if</span> contours[i][j][k][<span class="hljs-number">0</span>] == Min:<br>                    a = contours[i][j][k]<br>                <span class="hljs-keyword">if</span> contours[i][j][k][<span class="hljs-number">0</span>] == Max:<br>                    b.append(contours[i][j][k])<br>    M_in = <span class="hljs-number">50000</span><br>    c = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(b)):<br>        <span class="hljs-keyword">if</span> b[i][<span class="hljs-number">1</span>] &lt; M_in:<br>            c = b[i]<br>    <span class="hljs-keyword">return</span> a, c<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_left</span>(<span class="hljs-params">masked</span>):<br>    <span class="hljs-comment"># detected_edges = cv2.GaussianBlur(gray, (3, 3), 0)</span><br>    detected_edges = cv2.Canny(masked, <span class="hljs-number">30</span>, <span class="hljs-number">30</span> * <span class="hljs-number">3</span>, apertureSize=<span class="hljs-number">3</span>)<br>    dst = cv2.bitwise_and(masked, masked, mask=detected_edges)  <span class="hljs-comment"># just add some colours to edges from original image.</span><br><br>    lap = masked.copy()<br>    contours, hierarchy = cv2.findContours(image=detected_edges, mode=cv2.RETR_EXTERNAL, method=cv2.CHAIN_APPROX_SIMPLE)<br>    <span class="hljs-built_in">max</span> = <span class="hljs-number">50000</span><br>    <span class="hljs-built_in">min</span> = <span class="hljs-number">50000</span><br>    a = []<br>    b = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i])):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i][j])):<br>                <span class="hljs-keyword">if</span> contours[i][j][k][<span class="hljs-number">1</span>] &lt; <span class="hljs-built_in">min</span>:<br>                    <span class="hljs-built_in">min</span> = contours[i][j][k][<span class="hljs-number">1</span>]<br>                <span class="hljs-keyword">if</span> contours[i][j][k][<span class="hljs-number">0</span>] &lt; <span class="hljs-built_in">max</span>:<br>                    <span class="hljs-built_in">max</span> = contours[i][j][k][<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i])):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i][j])):<br>                <span class="hljs-keyword">if</span> contours[i][j][k][<span class="hljs-number">1</span>] == <span class="hljs-built_in">min</span>:<br>                    a = contours[i][j][k]<br>                <span class="hljs-keyword">if</span> contours[i][j][k][<span class="hljs-number">0</span>] == <span class="hljs-built_in">max</span>:<br>                    b.append(contours[i][j][k])<br><br>    Min = <span class="hljs-number">50000</span><br>    c = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(b)):<br>        <span class="hljs-keyword">if</span> b[i][<span class="hljs-number">1</span>] &lt; Min:<br>            c = b[i]<br><br>    c = [c[<span class="hljs-number">0</span>], c[<span class="hljs-number">1</span>] + <span class="hljs-number">5</span>]<br>    d = [a[<span class="hljs-number">0</span>], c[<span class="hljs-number">1</span>]]<br><br>    center = (a[<span class="hljs-number">0</span>], <span class="hljs-built_in">int</span>((a[<span class="hljs-number">1</span>] + d[<span class="hljs-number">1</span>]) / <span class="hljs-number">2</span>))<br><br>    cv2.circle(lap, (center[<span class="hljs-number">0</span>], center[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">3</span>, lineType=cv2.LINE_AA)<br>    cv2.circle(lap, (a[<span class="hljs-number">0</span>], a[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">3</span>, lineType=cv2.LINE_AA)<br>    cv2.circle(lap, (c[<span class="hljs-number">0</span>], c[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">3</span>, lineType=cv2.LINE_AA)<br>    cv2.circle(lap, (d[<span class="hljs-number">0</span>], d[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">3</span>, lineType=cv2.LINE_AA)<br>    cv2.drawContours(image=lap, contours=contours, contourIdx=-<span class="hljs-number">1</span>, color=(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), thickness=<span class="hljs-number">1</span>,<br>                     lineType=cv2.LINE_AA)<br>    cv2.imshow(<span class="hljs-string">&#x27;canny demo&#x27;</span>, lap)<br>    <span class="hljs-keyword">return</span> center<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_right</span>(<span class="hljs-params">masked</span>):<br>    <span class="hljs-comment"># detected_edges = cv2.GaussianBlur(gray, (3, 3), 0)</span><br>    detected_edges = cv2.Canny(masked, <span class="hljs-number">45</span>, <span class="hljs-number">40</span> * <span class="hljs-number">3</span>, apertureSize=<span class="hljs-number">3</span>)<br>    dst = cv2.bitwise_and(masked, masked, mask=detected_edges)  <span class="hljs-comment"># just add some colours to edges from original image.</span><br>    lap = masked.copy()<br>    contours, hierarchy = cv2.findContours(image=detected_edges, mode=cv2.RETR_EXTERNAL, method=cv2.CHAIN_APPROX_SIMPLE)<br>    <span class="hljs-built_in">max</span> = <span class="hljs-number">0</span><br>    <span class="hljs-built_in">min</span> = <span class="hljs-number">50000</span><br>    a = []<br>    b = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i])):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i][j])):<br>                <span class="hljs-keyword">if</span> contours[i][j][k][<span class="hljs-number">1</span>] &lt; <span class="hljs-built_in">min</span>:<br>                    <span class="hljs-built_in">min</span> = contours[i][j][k][<span class="hljs-number">1</span>]<br>                <span class="hljs-keyword">if</span> contours[i][j][k][<span class="hljs-number">0</span>] &gt; <span class="hljs-built_in">max</span>:<br>                    <span class="hljs-built_in">max</span> = contours[i][j][k][<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i])):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i][j])):<br>                <span class="hljs-keyword">if</span> contours[i][j][k][<span class="hljs-number">1</span>] == <span class="hljs-built_in">min</span>:<br>                    a = contours[i][j][k]<br>                <span class="hljs-keyword">if</span> contours[i][j][k][<span class="hljs-number">0</span>] == <span class="hljs-built_in">max</span>:<br>                    b.append(contours[i][j][k])<br><br>    Min = <span class="hljs-number">50000</span><br>    c = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(b)):<br>        <span class="hljs-keyword">if</span> b[i][<span class="hljs-number">1</span>] &lt; Min:<br>            c = b[i]<br><br>    d = (a[<span class="hljs-number">0</span>], c[<span class="hljs-number">1</span>])<br><br>    cv2.circle(lap, (a[<span class="hljs-number">0</span>], a[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">3</span>, lineType=cv2.LINE_AA)<br>    cv2.circle(lap, (c[<span class="hljs-number">0</span>], c[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">3</span>, lineType=cv2.LINE_AA)<br>    cv2.circle(lap, (d[<span class="hljs-number">0</span>], d[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">3</span>, lineType=cv2.LINE_AA)<br>    cv2.drawContours(image=lap, contours=contours, contourIdx=-<span class="hljs-number">1</span>, color=(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), thickness=<span class="hljs-number">1</span>,<br>                     lineType=cv2.LINE_AA)<br>    cv2.imshow(<span class="hljs-string">&#x27;canny demo&#x27;</span>, lap)<br>    <span class="hljs-keyword">return</span> d<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">RemoveDir</span>(<span class="hljs-params">filepath</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    如果文件夹不存在就创建，如果文件存在就清空！</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(filepath):<br>        os.mkdir(filepath)<br>    <span class="hljs-keyword">else</span>:<br>        shutil.rmtree(filepath)<br>        os.mkdir(filepath)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_tol</span>(<span class="hljs-params">img</span>):<br>    img_copy = img.copy()<br>    arr = []<br>    A = <span class="hljs-built_in">int</span>(img.shape[<span class="hljs-number">0</span>])<br>    B = <span class="hljs-built_in">int</span>(img.shape[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(A):<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(B):<br>            <span class="hljs-keyword">if</span> x != <span class="hljs-number">0</span>:<br>                temp1 = <span class="hljs-built_in">int</span>(img[y][x][<span class="hljs-number">0</span>]) - <span class="hljs-built_in">int</span>(img[y][x - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>])<br>                temp2 = <span class="hljs-built_in">int</span>(img[y][x][<span class="hljs-number">1</span>]) - <span class="hljs-built_in">int</span>(img[y][x - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>])<br>                temp3 = <span class="hljs-built_in">int</span>(img[y][x][<span class="hljs-number">2</span>]) - <span class="hljs-built_in">int</span>(img[y][x - <span class="hljs-number">1</span>][<span class="hljs-number">2</span>])<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(temp1) &gt; <span class="hljs-number">5</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">abs</span>(temp2) &gt; <span class="hljs-number">5</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">abs</span>(temp3) &gt; <span class="hljs-number">5</span>:<br>                    a = (x, y)<br>                    arr.append(a)<br><br>                    <span class="hljs-comment"># cv2.circle(img, (x, y), 1, (0, 0, 255), thickness=3, lineType=cv2.LINE_AA)</span><br><br>    co = img[arr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] + <span class="hljs-number">3</span>][arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>]<br>    <span class="hljs-comment"># for i in arr:</span><br>    <span class="hljs-comment">#     cv2.circle(img_copy, (i[0], i[1]), 1, (255, 0, 255), thickness=3, lineType=cv2.LINE_AA)</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(co))<br>    arr1 = []<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(A):<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(B):<br>            <span class="hljs-comment"># not (img[y][x] == co).all():</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>((<span class="hljs-built_in">int</span>(img[y][x][<span class="hljs-number">0</span>]) - <span class="hljs-built_in">int</span>(co[<span class="hljs-number">0</span>]))) &gt;= <span class="hljs-number">6</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(img[y][x][<span class="hljs-number">1</span>]) - <span class="hljs-built_in">int</span>(co[<span class="hljs-number">1</span>])) &gt;= <span class="hljs-number">6</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">abs</span>(<br>                    <span class="hljs-built_in">int</span>(img[y][x][<span class="hljs-number">2</span>]) - <span class="hljs-built_in">int</span>(co[<span class="hljs-number">2</span>])) &gt;= <span class="hljs-number">6</span>:<br>                b = (x, y)<br>                arr1.append(b)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arr1:<br>        cv2.circle(img_copy, (i[<span class="hljs-number">0</span>], i[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), thickness=<span class="hljs-number">1</span>, lineType=cv2.LINE_AA)<br>    arry = []<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(A):<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(B):<br>            <span class="hljs-comment"># not (img[y][x] == co).all():</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(img[y][x][<span class="hljs-number">0</span>]) - <span class="hljs-number">200</span>) &lt;= <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(img[y][x][<span class="hljs-number">1</span>]) - <span class="hljs-number">220</span>) &lt;= <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">abs</span>(<br>                    <span class="hljs-built_in">int</span>(img[y][x][<span class="hljs-number">2</span>]) - <span class="hljs-number">240</span>) &lt;= <span class="hljs-number">2</span>:<br>                b = (x, y)<br>                arry.append(b)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(arry) &gt; <span class="hljs-number">8</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arry:<br>            cv2.circle(img_copy, (i[<span class="hljs-number">0</span>], i[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">1</span>, lineType=cv2.LINE_AA)<br>    a = img_copy<br><br>    <span class="hljs-keyword">return</span> a<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_c</span>(<span class="hljs-params">img, place, img_fuzhi</span>):<br>    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br>    img = cv2.GaussianBlur(img, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), cv2.BORDER_DEFAULT)<br>    img = cv2.Canny(img, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>)<br>    img = cv2.dilate(img, (<span class="hljs-number">10</span>, <span class="hljs-number">10</span>), iterations=<span class="hljs-number">2</span>)<br>    img = cv2.erode(img, (<span class="hljs-number">10</span>, <span class="hljs-number">10</span>), iterations=<span class="hljs-number">1</span>)<br><br>    contours1, hierarchy = cv2.findContours(image=img, mode=cv2.RETR_EXTERNAL, method=cv2.CHAIN_APPROX_SIMPLE)<br>    cv2.drawContours(image=img_copy2, contours=contours1, contourIdx=-<span class="hljs-number">1</span>, color=(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), thickness=<span class="hljs-number">1</span>,<br>                     lineType=cv2.LINE_AA)<br>    p1, p2 = pd_is_max(contours1)<br>    <span class="hljs-comment"># cv2.circle(img, (200, 157), 1, (255, 255, 255), thickness=5, lineType=cv2.LINE_AA)</span><br><br>    area = []<br>    contours = []<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;length&quot;</span>, <span class="hljs-built_in">len</span>(contours1))<br>    <span class="hljs-keyword">for</span> obj <span class="hljs-keyword">in</span> contours1:<br>        <span class="hljs-keyword">if</span> cv2.contourArea(obj) != <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(cv2.contourArea(obj))<br>            area.append(cv2.contourArea(obj))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;area&quot;</span>, <span class="hljs-built_in">len</span>(area))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Variance of array : &quot;</span>, np.std(area))<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(area) != <span class="hljs-number">0</span>:<br><br>        zui_da = <span class="hljs-built_in">max</span>(area)<br>        zui_xiao = <span class="hljs-built_in">min</span>(area)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(area) == <span class="hljs-number">2</span>:<br>            <span class="hljs-comment"># contours.append(contours1[1])</span><br><br>            <span class="hljs-keyword">for</span> obj <span class="hljs-keyword">in</span> contours1:<br>                max_dimension1 = np.amax(obj, axis=<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">if</span> img.shape[<span class="hljs-number">1</span>] - max_dimension1[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] &gt; <span class="hljs-number">3</span>:<br>                    contours.append(obj)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= <span class="hljs-built_in">len</span>(area) &lt; <span class="hljs-number">2</span> <span class="hljs-keyword">or</span> <span class="hljs-number">2</span> &lt; <span class="hljs-built_in">len</span>(area) &lt;= <span class="hljs-number">4</span>:<br>            <span class="hljs-keyword">if</span> np.std(area) &lt; <span class="hljs-number">50</span>:<br>                <span class="hljs-keyword">for</span> obj <span class="hljs-keyword">in</span> contours1:<br>                    <span class="hljs-keyword">if</span> cv2.contourArea(obj) != <span class="hljs-number">0</span>:<br>                        contours.append(obj)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">for</span> obj <span class="hljs-keyword">in</span> contours1:<br>                    <span class="hljs-keyword">if</span> cv2.contourArea(obj) == <span class="hljs-built_in">max</span>(area):<br>                        contours.append(obj)<br><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> np.std(area) &lt; <span class="hljs-number">160</span>:<br>                <span class="hljs-keyword">for</span> obj <span class="hljs-keyword">in</span> contours1:<br>                    <span class="hljs-keyword">if</span> cv2.contourArea(obj) != <span class="hljs-number">0</span>:<br>                        contours.append(obj)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">for</span> obj <span class="hljs-keyword">in</span> contours1:<br>                    <span class="hljs-keyword">if</span> cv2.contourArea(obj) == zui_da:<br>                        contours.append(obj)<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;len&quot;</span>, <span class="hljs-built_in">len</span>(contours))<br>        Max = <span class="hljs-number">0</span><br>        Min = <span class="hljs-number">50000</span><br>        a = []<br>        b = []<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours)):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i])):<br>                <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i][j])):<br>                    <span class="hljs-keyword">if</span> contours[i][j][k][<span class="hljs-number">0</span>] &lt; Min:<br>                        Min = contours[i][j][k][<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours)):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i])):<br>                <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i][j])):<br>                    <span class="hljs-keyword">if</span> contours[i][j][k][<span class="hljs-number">0</span>] &gt; Max:<br>                        Max = contours[i][j][k][<span class="hljs-number">0</span>]<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours)):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i])):<br>                <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours[i][j])):<br>                    <span class="hljs-keyword">if</span> contours[i][j][k][<span class="hljs-number">0</span>] == Min:<br>                        a = contours[i][j][k]<br>                    <span class="hljs-keyword">if</span> contours[i][j][k][<span class="hljs-number">0</span>] == Max:<br>                        b.append(contours[i][j][k])<br>        M_in = <span class="hljs-number">50000</span><br>        c = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(b)):<br>            <span class="hljs-keyword">if</span> b[i][<span class="hljs-number">1</span>] &lt; M_in:<br>                c = b[i]<br>        <span class="hljs-built_in">print</span>(a)<br>        <span class="hljs-built_in">print</span>(c)<br>        d1 = <span class="hljs-built_in">int</span>((a[<span class="hljs-number">0</span>] + c[<span class="hljs-number">0</span>]) / <span class="hljs-number">2</span>)<br>        d2 = <span class="hljs-built_in">int</span>((a[<span class="hljs-number">1</span>] + c[<span class="hljs-number">1</span>]) / <span class="hljs-number">2</span>)<br>        d = [d1, d2]<br><br>        cv2.circle(img_copy2, (a[<span class="hljs-number">0</span>], a[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">3</span>, lineType=cv2.LINE_AA)<br>        cv2.circle(img_copy2, (c[<span class="hljs-number">0</span>], c[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">3</span>, lineType=cv2.LINE_AA)<br>        cv2.circle(img_copy2, (d[<span class="hljs-number">0</span>], d[<span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), thickness=<span class="hljs-number">3</span>, lineType=cv2.LINE_AA)<br><br>        cv2.imshow(<span class="hljs-string">&quot;csa&quot;</span>, img_copy2)<br>        hwnd1 = win32gui.FindWindow(<span class="hljs-literal">None</span>, <span class="hljs-string">&quot;csa&quot;</span>)  <span class="hljs-comment"># 获取句柄，然后置顶</span><br>        CVRECT = cv2.getWindowImageRect(<span class="hljs-string">&quot;csa&quot;</span>)<br>        win32gui.SetWindowPos(hwnd1, win32con.HWND_TOPMOST, <span class="hljs-number">900</span>, <span class="hljs-number">120</span>, img_copy2.shape[<span class="hljs-number">1</span>] + <span class="hljs-number">10</span>, img_copy2.shape[<span class="hljs-number">0</span>] + <span class="hljs-number">40</span>,<br>                              win32con.SWP_SHOWWINDOW)<br>        cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>, img)<br>        hwnd2 = win32gui.FindWindow(<span class="hljs-literal">None</span>, <span class="hljs-string">&quot;img&quot;</span>)  <span class="hljs-comment"># 获取句柄，然后置顶</span><br>        CVRECT1 = cv2.getWindowImageRect(<span class="hljs-string">&quot;img&quot;</span>)<br>        win32gui.SetWindowPos(hwnd2, win32con.HWND_TOPMOST, <span class="hljs-number">1200</span>, <span class="hljs-number">120</span>, img.shape[<span class="hljs-number">1</span>] + <span class="hljs-number">10</span>, img.shape[<span class="hljs-number">0</span>] + <span class="hljs-number">40</span>,<br>                              win32con.SWP_SHOWWINDOW)<br>        <span class="hljs-keyword">return</span> d<br>    <span class="hljs-keyword">else</span>:<br>        img_fuzhi = cv2.cvtColor(img_fuzhi, cv2.COLOR_BGR2GRAY)<br>        img_fuzhi = cv2.GaussianBlur(img_fuzhi, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), cv2.BORDER_DEFAULT)<br>        <span class="hljs-keyword">if</span> place == <span class="hljs-string">&quot;left&quot;</span>:<br>            d = find_left(img_fuzhi)<br>            <span class="hljs-keyword">return</span> d<br>        <span class="hljs-keyword">else</span>:<br>            d = find_right(img_fuzhi)<br>            <span class="hljs-keyword">return</span> d<br><br><br>a = -<span class="hljs-number">1</span><br>p = <span class="hljs-string">&quot;F:\\img\\&quot;</span><br>RemoveDir(p)<br>image = pyscreenshot.grab(bbox=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">450</span>, <span class="hljs-number">855</span>))<br>image.save(<span class="hljs-string">&quot;f:\\img\\Snipaste_2022.png&quot;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    pyautogui.press(<span class="hljs-string">&#x27;F1&#x27;</span>)<br>    pyautogui.hotkey(<span class="hljs-string">&#x27;Ctrl&#x27;</span>, <span class="hljs-string">&#x27;Shift&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>)<br>    a = a + <span class="hljs-number">1</span><br>    path = p + <span class="hljs-string">&quot;Snipaste_2022_&quot;</span> + <span class="hljs-built_in">str</span>(a) + <span class="hljs-string">&quot;.png&quot;</span><br>    img = cv2.imread(path)<br>    img_rgb = img.copy()<br>    template = cv2.imread(<span class="hljs-string">&#x27;F:\Snipaste_2022_0.png&#x27;</span>)<br>    max_loc, h, w, center_loc = get_center(img, template)<br>    img = cv2.resize(img, (<span class="hljs-number">450</span>, <span class="hljs-number">855</span>), interpolation=cv2.INTER_CUBIC)<br>    center = ()<br>    length = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> center_loc[<span class="hljs-number">0</span>] &gt; img.shape[<span class="hljs-number">1</span>] / <span class="hljs-number">2</span>:<br>        img = img[<span class="hljs-number">300</span>:center_loc[<span class="hljs-number">1</span>], <span class="hljs-number">0</span>:center_loc[<span class="hljs-number">0</span>] - <span class="hljs-number">15</span>]<br>        img_copy2 = img.copy()<br>        img_fuzhi = img.copy()<br>        place = <span class="hljs-string">&quot;left&quot;</span><br>        getimg = get_tol(img)<br>        get_img = get_img1(getimg, -<span class="hljs-number">1</span>)<br><br>        center1 = get_c(get_img, place, img_fuzhi)<br>        center2 = [img.shape[<span class="hljs-number">1</span>] + <span class="hljs-number">15</span>, img.shape[<span class="hljs-number">0</span>]]<br>        length = distance(center1, center2)<br>        time1 = get_time(length)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;时间&quot;</span>, time1)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;距离&quot;</span>, length)<br>        dian_ji(time1)<br><br>    <span class="hljs-keyword">else</span>:<br><br>        img = img[<span class="hljs-number">300</span>:center_loc[<span class="hljs-number">1</span>], center_loc[<span class="hljs-number">0</span>] + <span class="hljs-number">15</span>:img.shape[<span class="hljs-number">1</span>]]<br>        img_copy2 = img.copy()<br>        img_fuzhi = img.copy()<br>        place = <span class="hljs-string">&quot;r&quot;</span><br>        getimg = get_tol(img)<br>        get_img = get_img1(getimg, <span class="hljs-number">1</span>)<br>        center1 = get_c(get_img, place, img_fuzhi)<br>        center2 = [<span class="hljs-number">0</span> - <span class="hljs-number">15</span>, img.shape[<span class="hljs-number">0</span>]]<br>        length = distance(center1, center2)<br>        time1 = get_time(length)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;时间&quot;</span>, time1)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;距离&quot;</span>, length)<br>        dian_ji(time1)<br><br>    cv2.waitKey(<span class="hljs-number">600</span>)<br>    time.sleep(<span class="hljs-number">0.8</span>)<br><br></code></pre></td></tr></table></figure><p>这个代码其实是最终版本，整个跳一跳有一个形状这个方法不能处理，但是老实憨厚版可以处理（目前我没截到那个形状，截到了我再补上。）所以我直接把这俩整合到一起了，一个跳一跳跑两个程序。</p><p><strong>怎么操作最后再说</strong></p><h1 id="3，投机取巧版"><a href="#3，投机取巧版" class="headerlink" title="3，投机取巧版"></a>3，投机取巧版</h1><p>这个方法我只说说思路</p><p>跳一跳有个规律，<strong>当你这次跳跃刚好命中中心，那么下一次跳跃的目标点中心就会显示有个白点</strong>：</p><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022_18.png"></p><p>我们同样可以用扫描像素点的方法，找到第一个像素点是白色的位置，那么这个点的位置就直接是中心的位置，两个点直接就找出来了，But,如果你下次跳的不是正中心呢，直接G。所以我说这是投机取巧版。</p><h1 id="得到速度"><a href="#得到速度" class="headerlink" title="得到速度"></a>得到速度</h1><p>如果不是拯救者的电脑（因为我是）：</p><p>我直接明说，跳一跳的开局两个方块的距离的固定的</p><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022_19.png"></p><p>打开你们的windows自带的画图工具，手动找到两个点的坐标，手动算距离，再用下面的代码测试</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> pynput.mouse <span class="hljs-keyword">import</span> Button, Controller<br>mouse = Controller()<br>mouse.press(Button.left)<span class="hljs-comment">#模拟按压</span><br>time.sleep()<span class="hljs-comment">#模拟按下时间。从0.5开始测试，直到跳到正中心的位置</span><br>mouse.release(Button.left)<span class="hljs-comment">#模拟松开</span><br><br></code></pre></td></tr></table></figure><p>再用手动算出来的距离除以时间，得到速度，这个速度就是之后要用的速度。</p><p>拯救者的就不用了，直接copy</p><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p>右键之前提到的Snipaste的首选项，</p><p><img src="/images/%E8%B7%B3%E4%B8%80%E8%B7%B3/Snipaste_2022_21.png">，改成这样。</p><p>把跳一跳放在一个合适的位置，用之前提到的OneQuick工具，Win+G将跳一跳窗口置顶，防止点其他地方窗口没了。</p><p>把鼠标放在跳一跳窗口内，然后别动了，按shift+f10启动程序。开始跑。</p><p>几千上万分不成问题。</p><p>在没改源码的情况下这个外挂算是比较nb了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
